function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ReactDOM from 'react-dom';
import { mount } from 'enzyme';
import Heading from '.';
import { H1, H2, H3, H4, H5, H6 } from './presets';
describe('Heading', function () {
  var OLD_ENV = process.env; // Capture console warnings and errors as we're expecting to produce both
  // eslint-disable-next-line no-console

  var nativeWarn = console.warn; // eslint-disable-next-line no-console

  var nativeError = console.error;
  var warnCallCount;
  beforeEach(function () {
    jest.resetModules();
    process.env = _objectSpread({}, OLD_ENV); // eslint-disable-next-line no-console

    console.warn = function () {
      warnCallCount += 1;
    };

    warnCallCount = 0; // eslint-disable-next-line no-console

    console.error = function () {};
  });
  afterEach(function () {
    // eslint-disable-next-line no-console
    console.warn = nativeWarn; // eslint-disable-next-line no-console

    console.error = nativeError;
    process.env = OLD_ENV;
  });
  it('renders a Heading and all the H-level tags without crashing or producing a warning', function () {
    var example = 'example';
    var wrapper = React.createElement(Heading, null, example);
    var div = document.createElement('div');
    ReactDOM.render(wrapper, div);
    ReactDOM.render(React.createElement(H1, null, example), div);
    ReactDOM.render(React.createElement(H2, null, example), div);
    ReactDOM.render(React.createElement(H3, null, example), div);
    ReactDOM.render(React.createElement(H4, null, example), div);
    ReactDOM.render(React.createElement(H5, null, example), div);
    ReactDOM.render(React.createElement(H6, null, example), div);
    expect(warnCallCount).toEqual(0);
  });
  it('allows custom string-based font size without crashing', function () {
    ReactDOM.render(React.createElement(Heading, {
      size: "SMALL"
    }, "Test"), document.createElement('div'));
  });
  it('allows custom numeric GDS font size without crashing', function () {
    ReactDOM.render(React.createElement(Heading, {
      size: 16
    }, "Test"), document.createElement('div'));
  });
  it('throws an error if an unsupported size is used', function () {
    var example = 'example';
    var div = document.createElement('div');
    expect(function () {
      ReactDOM.render(React.createElement(Heading, {
        size: 0
      }, example), div);
    }).toThrow();
    expect(function () {
      ReactDOM.render(React.createElement(Heading, {
        size: 1
      }, example), div);
    }).toThrow();
    expect(function () {
      ReactDOM.render(React.createElement(Heading, {
        size: 99999
      }, example), div);
    }).toThrow();
    expect(function () {
      ReactDOM.render(React.createElement(Heading, {
        size: "test"
      }, example), div);
    }).toThrow();
  });
  it('produces deprecation warnings if level prop is used when not in production', function () {
    process.env.NODE_ENV = 'development';
    mount(React.createElement(Heading, {
      level: "1"
    }, "example"));
    mount(React.createElement(Heading, {
      level: "3"
    }, "example"));
    mount(React.createElement(Heading, {
      level: "7"
    }, "example")); // For reasons unknown, styled-components is (currently) calling styling functions twice
    // so rather than checking for 3 warnings here we're just checking it's not zero

    expect(warnCallCount).not.toEqual(0);
  });
  it('does not produces deprecation warnings if level prop is used when in production', function () {
    process.env.NODE_ENV = 'production';
    mount(React.createElement(Heading, {
      level: "1"
    }, "example"));
    mount(React.createElement(Heading, {
      level: "3"
    }, "example"));
    mount(React.createElement(Heading, {
      level: "7"
    }, "example"));
    expect(warnCallCount).toEqual(0);
  });
  it('matches wrapper snapshot', function () {
    var example = 'example';
    var wrapper = React.createElement(Heading, null, example);
    expect(mount(wrapper)).toMatchSnapshot('wrapper mount');
  });
});
//# sourceMappingURL=test.js.map