{"version":3,"sources":["../src/index.js"],"names":["styled","React","PropTypes","HEADING_SIZES","LEVEL_SIZE","LEVEL_TAG","MEDIA_QUERIES","TYPOGRAPHY_SCALE","spacing","typography","StyledHeading","textColour","size","actualSize","Number","isNaN","Error","Object","assign","font","weight","display","marginTop","scaleInfo","marginBottom","mobile","TABLET","tablet","withWhiteSpace","Heading","level","props","process","env","NODE_ENV","console","warn","defaultProps","as","undefined","H1","H2","H3","H4","H5","H6"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,aAA/C,EAA8DC,gBAA9D,QAAsF,wBAAtF;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC,C,CAEA;AACA;AACA;;AAEA,IAAMC,aAAa,GAAGV,MAAM,CAAC,IAAD,CAAN,CACpBS,UAAU,CAACE,UADS,EAEpB,gBAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACZ,MAAMC,UAAU,GAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,IAAD,CAAnB,IAA6BT,aAAa,CAACS,IAAD,CAA1C,GAAmDA,IAAtE;;AAEA,MAAI,CAACC,UAAL,EAAiB;AACf,UAAMG,KAAK,mBAAiBJ,IAAjB,wBAAX;AACD;;AAED,SAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,UAAU,CAACU,IAAX,CAAgB;AAAEP,IAAAA,IAAI,EAAEC,UAAR;AAAoBO,IAAAA,MAAM,EAAE;AAA5B,GAAhB,CAAlB,CAAP;AACD,CAVmB,EAWpB;AACEC,EAAAA,OAAO,EAAE,OADX;AAEEC,EAAAA,SAAS,EAAE;AAFb,CAXoB,EAepB,iBAAc;AAAA;;AAAA,MAAXV,IAAW,SAAXA,IAAW;AACZ,MAAMC,UAAU,GAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,IAAD,CAAnB,IAA6BT,aAAa,CAACS,IAAD,CAA1C,GAAmDA,IAAtE;AACA,MAAMW,SAAS,GAAGhB,gBAAgB,CAACM,UAAD,CAAlC;AAEA,SAAOI,MAAM,CAACC,MAAP,CACL,EADK;AAGHM,IAAAA,YAAY,EAAED,SAAS,CAACE,MAAV,CAAiBjB;AAH5B,oBAIFF,aAAa,CAACoB,MAJZ,IAIqB;AACtBF,IAAAA,YAAY,EAAED,SAAS,CAACI,MAAV,CAAiBnB;AADT,GAJrB,kBAAP;AASD,CA5BmB,EA6BpBA,OAAO,CAACoB,cAAR,EA7BoB,CAAtB;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,IAAMC,OAAO,GAAG,SAAVA,OAAU,QAAyB;AAAA,MAAtBC,KAAsB,SAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AACvC,MAAID,KAAJ,EAAW;AACT,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAC,MAAAA,OAAO,CAACC,IAAR,yEAAkFN,KAAlF;AACD;;AACD,QAAIzB,SAAS,CAACyB,KAAD,CAAb,EAAsB;AACpB,aAAO,oBAAC,aAAD;AAAe,QAAA,IAAI,EAAE1B,UAAU,CAAC0B,KAAD;AAA/B,SAA4CC,KAA5C;AAAmD,QAAA,EAAE,EAAE1B,SAAS,CAACyB,KAAD;AAAhE,SAAP;AACD;AACF;;AAED,SAAO,oBAAC,aAAD,EAAmBC,KAAnB,CAAP;AACD,CAZD;;AAcAF,OAAO,CAACQ,YAAR,GAAuB;AACrBC,EAAAA,EAAE,EAAEC,SADiB;AAErBT,EAAAA,KAAK,EAAES,SAFc;AAGrB3B,EAAAA,IAAI,EAAE;AAHe,CAAvB;AAwBA,eAAeiB,OAAf;AAEA,SAASW,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,QAAuC,WAAvC","sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { HEADING_SIZES, LEVEL_SIZE, LEVEL_TAG, MEDIA_QUERIES, TYPOGRAPHY_SCALE } from '@govuk-react/constants';\nimport { spacing, typography } from '@govuk-react/lib';\n\n// use `size` only with string for XLARGE, SMALL etc and number for px size\n// so if `size` is a string, we find a numeric size based off `HEADING_SIZES`\n// but if `size` is a number we just send through that number\n\nconst StyledHeading = styled('h1')(\n  typography.textColour,\n  ({ size }) => {\n    const actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;\n\n    if (!actualSize) {\n      throw Error(`Unknown size ${size} used for heading.`);\n    }\n\n    return Object.assign({}, typography.font({ size: actualSize, weight: 'bold' }));\n  },\n  {\n    display: 'block',\n    marginTop: 0,\n  },\n  ({ size }) => {\n    const actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;\n    const scaleInfo = TYPOGRAPHY_SCALE[actualSize];\n\n    return Object.assign(\n      {},\n      {\n        marginBottom: scaleInfo.mobile.spacing,\n        [MEDIA_QUERIES.TABLET]: {\n          marginBottom: scaleInfo.tablet.spacing,\n        },\n      }\n    );\n  },\n  spacing.withWhiteSpace()\n);\n\n/**\n *\n * ### Usage\n *\n *\n * Simple\n * ```jsx\n * <Heading>Heading text</Heading>\n * ```\n *\n * To pick different heading levels it is recommended to use the shortcut versions as\n * that will pick the appropriate tag as well as set the appropriate corresponding font size.\n *\n * Using shortcuts\n * ```jsx\n * import { H1, H2, H3, H4, H5, H6 } from \"@govuk-react/heading\";\n *\n * <H1>h1</H1>\n * <H2>h2</H2>\n * <H3>h3</H3>\n * <H4>h4</H4>\n * <H5>h5</H5>\n * <H6>h6</H6>\n * ```\n *\n * Differing sizes\n * ```jsx\n * <H6 size={80}>\n *   H6 with font size 80\n * </H6>\n * <Heading as=\"h2\" size=\"SMALL\">\n *   Heading as h2 with SMALL size\n * </Heading>\n * <H3 size=\"LARGE\">H3 with LARGE size</H3>\n * ```\n *\n * Props pass through\n * ```jsx\n * <Heading onClick={() => { console.log('clicked'); }}>Click me</Heading>\n * ```\n *\n * ### References:\n * - https://design-system.service.gov.uk/styles/typography/#headings\n * - https://github.com/alphagov/govuk_frontend_toolkit/blob/master/stylesheets/_typography.scss\n * - https://github.com/alphagov/govuk-frontend/blob/master/src/core/_typography.scss\n */\nconst Heading = ({ level, ...props }) => {\n  if (level) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(`deprecated prop 'level' used in Heading, please replace with an \"H${level}\" component`);\n    }\n    if (LEVEL_TAG[level]) {\n      return <StyledHeading size={LEVEL_SIZE[level]} {...props} as={LEVEL_TAG[level]} />;\n    }\n  }\n\n  return <StyledHeading {...props} />;\n};\n\nHeading.defaultProps = {\n  as: undefined,\n  level: undefined,\n  size: 'XLARGE',\n};\n\nHeading.propTypes = {\n  /**\n   * Semantic heading tag to use (e.g. 'h3')\n   * By default element used will be an 'h1'\n   */\n  as: PropTypes.string,\n  /**\n   * Semantic heading level value between 1 and 6 (deprecated)\n   */\n  level: PropTypes.number,\n  /**\n   * Visual size level, accepts:\n   *    `XLARGE`, `LARGE`, `MEDIUM`, `SMALL`, `XL`, `L`, `M`, `S`\n   *    or a numeric size that fits in the GDS font scale list\n   */\n  size: PropTypes.oneOf([...Object.keys(HEADING_SIZES), ...Object.keys(TYPOGRAPHY_SCALE)]),\n};\n\nexport default Heading;\n\nexport { H1, H2, H3, H4, H5, H6 } from './presets';\n"],"file":"index.js"}