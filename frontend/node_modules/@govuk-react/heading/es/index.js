function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import React from 'react';
import PropTypes from 'prop-types';
import { HEADING_SIZES, LEVEL_SIZE, LEVEL_TAG, MEDIA_QUERIES, TYPOGRAPHY_SCALE } from '@govuk-react/constants';
import { spacing, typography } from '@govuk-react/lib'; // use `size` only with string for XLARGE, SMALL etc and number for px size
// so if `size` is a string, we find a numeric size based off `HEADING_SIZES`
// but if `size` is a number we just send through that number

var StyledHeading = styled('h1')(typography.textColour, function (_ref) {
  var size = _ref.size;
  var actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;

  if (!actualSize) {
    throw Error("Unknown size " + size + " used for heading.");
  }

  return Object.assign({}, typography.font({
    size: actualSize,
    weight: 'bold'
  }));
}, {
  display: 'block',
  marginTop: 0
}, function (_ref2) {
  var _Object$assign;

  var size = _ref2.size;
  var actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;
  var scaleInfo = TYPOGRAPHY_SCALE[actualSize];
  return Object.assign({}, (_Object$assign = {
    marginBottom: scaleInfo.mobile.spacing
  }, _Object$assign[MEDIA_QUERIES.TABLET] = {
    marginBottom: scaleInfo.tablet.spacing
  }, _Object$assign));
}, spacing.withWhiteSpace());
/**
 *
 * ### Usage
 *
 *
 * Simple
 * ```jsx
 * <Heading>Heading text</Heading>
 * ```
 *
 * To pick different heading levels it is recommended to use the shortcut versions as
 * that will pick the appropriate tag as well as set the appropriate corresponding font size.
 *
 * Using shortcuts
 * ```jsx
 * import { H1, H2, H3, H4, H5, H6 } from "@govuk-react/heading";
 *
 * <H1>h1</H1>
 * <H2>h2</H2>
 * <H3>h3</H3>
 * <H4>h4</H4>
 * <H5>h5</H5>
 * <H6>h6</H6>
 * ```
 *
 * Differing sizes
 * ```jsx
 * <H6 size={80}>
 *   H6 with font size 80
 * </H6>
 * <Heading as="h2" size="SMALL">
 *   Heading as h2 with SMALL size
 * </Heading>
 * <H3 size="LARGE">H3 with LARGE size</H3>
 * ```
 *
 * Props pass through
 * ```jsx
 * <Heading onClick={() => { console.log('clicked'); }}>Click me</Heading>
 * ```
 *
 * ### References:
 * - https://design-system.service.gov.uk/styles/typography/#headings
 * - https://github.com/alphagov/govuk_frontend_toolkit/blob/master/stylesheets/_typography.scss
 * - https://github.com/alphagov/govuk-frontend/blob/master/src/core/_typography.scss
 */

var Heading = function Heading(_ref3) {
  var level = _ref3.level,
      props = _objectWithoutPropertiesLoose(_ref3, ["level"]);

  if (level) {
    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line no-console
      console.warn("deprecated prop 'level' used in Heading, please replace with an \"H" + level + "\" component");
    }

    if (LEVEL_TAG[level]) {
      return React.createElement(StyledHeading, _extends({
        size: LEVEL_SIZE[level]
      }, props, {
        as: LEVEL_TAG[level]
      }));
    }
  }

  return React.createElement(StyledHeading, props);
};

Heading.defaultProps = {
  as: undefined,
  level: undefined,
  size: 'XLARGE'
};
export default Heading;
export { H1, H2, H3, H4, H5, H6 } from './presets';
//# sourceMappingURL=index.js.map