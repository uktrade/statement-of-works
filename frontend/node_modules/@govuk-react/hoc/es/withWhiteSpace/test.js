function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import styled from 'styled-components';
import { mount } from 'enzyme';
import withWhiteSpace from '.';
describe('withWhiteSpace', function () {
  // capture console.warn as this is deprecated
  var OLD_ENV = process.env; // eslint-disable-next-line no-console

  var nativeWarn = console.warn;
  var warnCallCount;
  beforeEach(function () {
    jest.resetModules();
    process.env = _objectSpread({}, OLD_ENV); // eslint-disable-next-line no-console

    console.warn = function () {
      warnCallCount += 1;
    };

    warnCallCount = 0;
  });
  afterEach(function () {
    // eslint-disable-next-line no-console
    console.warn = nativeWarn;
    process.env = OLD_ENV;
  });
  var WithoutConfig = withWhiteSpace()(styled('div')({}));
  var WithConfig = withWhiteSpace({
    marginBottom: 0
  })(styled('div')({}));
  it('renders without config without crashing', function () {
    mount(React.createElement(WithoutConfig, null, "Example"));
  });
  it('renders with config without crashing', function () {
    mount(React.createElement(WithConfig, null, "Example"));
  });
  it('renders with simple mb prop without crashing', function () {
    mount(React.createElement(WithConfig, {
      mb: 5
    }, "Example"));
  });
  it('renders with a margin prop without crashing', function () {
    mount(React.createElement(WithConfig, {
      margin: {
        size: 5
      }
    }, "Example"));
    mount(React.createElement(WithConfig, {
      margin: 5
    }, "Example"));
    mount(React.createElement(WithConfig, {
      margin: [5, {
        size: 2,
        direction: 'top'
      }]
    }, "Example"));
  });
  it('renders with a padding prop without crashing', function () {
    mount(React.createElement(WithConfig, {
      padding: {
        size: 5
      }
    }, "Example"));
    mount(React.createElement(WithConfig, {
      padding: 5
    }, "Example"));
    mount(React.createElement(WithConfig, {
      padding: [5, {
        size: 2,
        direction: 'top'
      }]
    }, "Example"));
  });
  it('produces a deprecation warning in development', function () {
    process.env.NODE_ENV = 'development';
    mount(React.createElement(WithoutConfig, null, "Example"));
    expect(warnCallCount).not.toEqual(0);
  });
});
//# sourceMappingURL=test.js.map