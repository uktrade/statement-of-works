{"version":3,"sources":["../src/test.js"],"names":["React","mount","MultiChoice","MultiChoiceWithKnobs","MultiChoiceWithKnobsHint","MultiChoiceWithKnobsError","describe","it","wrapper","expect","find","contains","toBe","metaData","touched","error","toMatchSnapshot"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAOC,WAAP,MAAwB,GAAxB;AACA,OAAOC,oBAAP,IAA+BC,wBAA/B,EAAyDC,yBAAzD,QAA0F,YAA1F;AAEAC,QAAQ,CAAC,aAAD,EAAgB,YAAM;AAC5BC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/B,QAAMC,OAAO,GAAGP,KAAK,CAAC,oBAAC,oBAAD,OAAD,CAArB;AACAQ,IAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,WAAb,EAA0BC,QAA1B,CAAmC,eAAnC,CAAD,CAAN,CAA4DC,IAA5D,CAAiE,IAAjE;AACD,GAHC,CAAF;AAKAL,EAAAA,EAAE,CAAC,qBAAD,EAAwB,YAAM;AAC9B,QAAMC,OAAO,GAAGP,KAAK,CAAC,oBAAC,wBAAD,OAAD,CAArB;AACAQ,IAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,UAAb,EAAyBC,QAAzB,CAAkC,cAAlC,CAAD,CAAN,CAA0DC,IAA1D,CAA+D,IAA/D;AACD,GAHC,CAAF;AAKAL,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,QAAMC,OAAO,GAAGP,KAAK,CAAC,oBAAC,yBAAD,OAAD,CAArB;AACAQ,IAAAA,MAAM,CAACD,OAAO,CAACE,IAAR,CAAa,WAAb,EAA0BC,QAA1B,CAAmC,eAAnC,CAAD,CAAN,CAA4DC,IAA5D,CAAiE,IAAjE;AACD,GAHC,CAAF;AAKAL,EAAAA,EAAE,CAAC,kBAAD,EAAqB,YAAM;AAC3B,QAAMM,QAAQ,GAAG;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAAjB;AACA,QAAMP,OAAO,GAAGP,KAAK,CAAC,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,eAAnB;AAAmC,MAAA,IAAI,EAAC,cAAxC;AAAuD,MAAA,IAAI,EAAEY;AAA7D,MAAD,CAArB;AACAJ,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBQ,eAAhB;AACD,GAJC,CAAF;AAKD,CArBO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\n\nimport MultiChoice from '.';\nimport MultiChoiceWithKnobs, { MultiChoiceWithKnobsHint, MultiChoiceWithKnobsError } from './fixtures';\n\ndescribe('MultiChoice', () => {\n  it('renders with a label', () => {\n    const wrapper = mount(<MultiChoiceWithKnobs />);\n    expect(wrapper.find('LabelText').contains('Example label')).toBe(true);\n  });\n\n  it('renders with a hint', () => {\n    const wrapper = mount(<MultiChoiceWithKnobsHint />);\n    expect(wrapper.find('HintText').contains('Example hint')).toBe(true);\n  });\n\n  it('renders with an error', () => {\n    const wrapper = mount(<MultiChoiceWithKnobsError />);\n    expect(wrapper.find('ErrorText').contains('Example error')).toBe(true);\n  });\n\n  it('matches snapshot', () => {\n    const metaData = { touched: true, error: 'Example error' };\n    const wrapper = mount(<MultiChoice label=\"Example label\" hint=\"Example hint\" meta={metaData} />);\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n"],"file":"test.js"}