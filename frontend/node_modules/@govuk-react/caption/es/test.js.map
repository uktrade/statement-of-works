{"version":3,"sources":["../src/test.js"],"names":["React","mount","Caption","describe","nativeError","console","error","beforeEach","jest","resetModules","afterEach","it","sizes","forEach","size","expect","exists","toBeTruthy","toThrow","toMatchSnapshot"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAOC,OAAP,MAAoB,YAApB;AAEAC,QAAQ,CAAC,SAAD,EAAY,YAAM;AACxB;AACA;AACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,KAA5B;AACAC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,IAAI,CAACC,YAAL,GADe,CAEf;;AACAJ,IAAAA,OAAO,CAACC,KAAR,GAAgB,YAAM,CAAE,CAAxB;AACD,GAJS,CAAV;AAMAI,EAAAA,SAAS,CAAC,YAAM;AACd;AACAL,IAAAA,OAAO,CAACC,KAAR,GAAgBF,WAAhB;AACD,GAHQ,CAAT;AAKAO,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMC,KAAK,GAAG,CAAC,IAAD,EAAO,QAAP,EAAiB,GAAjB,EAAsB,OAAtB,EAA+B,GAA/B,EAAoC,QAApC,CAAd;AACAA,IAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpBC,MAAAA,MAAM,CAACd,KAAK,CAAC,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAEa;AAAf,iBAAD,CAAL,CAA4CE,MAA5C,EAAD,CAAN,CAA6DC,UAA7D;AACD,KAFD;AAGD,GALC,CAAF;AAOAN,EAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/DV,IAAAA,KAAK,CAAC,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAE;AAAf,cAAD,CAAL;AACD,GAFC,CAAF;AAIAU,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzDI,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE;AAAf,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGAH,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE;AAAf,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGAH,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE;AAAf,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGAH,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAC;AAAd,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGD,GAbC,CAAF;AAeAP,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnCI,IAAAA,MAAM,CAACd,KAAK,CAAC,oBAAC,OAAD,uBAAD,CAAN,CAAN,CAA+CkB,eAA/C;AACD,GAFC,CAAF;AAGD,CA5CO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\n\nimport Caption from './fixtures';\n\ndescribe('Caption', () => {\n  // Capture errors as we're expecting to throw some\n  // eslint-disable-next-line no-console\n  const nativeError = console.error;\n  beforeEach(() => {\n    jest.resetModules();\n    // eslint-disable-next-line no-console\n    console.error = () => {};\n  });\n\n  afterEach(() => {\n    // eslint-disable-next-line no-console\n    console.error = nativeError;\n  });\n\n  it('allows custom string-based font size without crashing', () => {\n    const sizes = ['XL', 'XLARGE', 'L', 'LARGE', 'M', 'MEDIUM'];\n    sizes.forEach(size => {\n      expect(mount(<Caption size={size}>Tests</Caption>).exists()).toBeTruthy();\n    });\n  });\n\n  it('allows custom numeric GDS font size without crashing', () => {\n    mount(<Caption size={16}>Test</Caption>);\n  });\n\n  it('throws an error if an unsupported size is used', () => {\n    expect(() => {\n      mount(<Caption size={0}>example</Caption>);\n    }).toThrow();\n    expect(() => {\n      mount(<Caption size={1}>example</Caption>);\n    }).toThrow();\n    expect(() => {\n      mount(<Caption size={99999}>example</Caption>);\n    }).toThrow();\n    expect(() => {\n      mount(<Caption size=\"test\">example</Caption>);\n    }).toThrow();\n  });\n\n  it('matches wrapper snapshot', () => {\n    expect(mount(<Caption>Heading text</Caption>)).toMatchSnapshot();\n  });\n});\n"],"file":"test.js"}