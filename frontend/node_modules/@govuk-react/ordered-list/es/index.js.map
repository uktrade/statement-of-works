{"version":3,"sources":["../src/index.js"],"names":["React","PropTypes","styled","MEDIA_QUERIES","SPACING_POINTS","spacing","typography","ListItem","translateType","type","bullet","number","OrderedList","font","size","textColour","marginTop","withWhiteSpace","margin","direction","listStyleType","paddingLeft","includes","marginBottom","TABLET","DocumentedComponent","props","defaultProps","undefined","propTypes"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,wBAA9C;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,IAAsCF,IAAtC,KAA+CA,IAAtD;AACD;;AAED,IAAMG,WAAW,GAAGV,MAAM,CAAC,IAAD,CAAN,CAClBI,UAAU,CAACO,IAAX,CAAgB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAhB,CADkB,EAElBR,UAAU,CAACS,UAFO,EAGlB;AACEC,EAAAA,SAAS,EAAE,CADb;AAGE,SAAO;AACLA,IAAAA,SAAS,EAAEZ,cAAc,CAAC,CAAD;AADpB;AAHT,CAHkB,EAUlBC,OAAO,CAACY,cAAR,CAAuB;AAAEC,EAAAA,MAAM,EAAE;AAAEJ,IAAAA,IAAI,EAAE,CAAR;AAAWK,IAAAA,SAAS,EAAE;AAAtB;AAAV,CAAvB,CAVkB,EAWlB,gBAAuB;AAAA;;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AACrB,MAAMX,IAAI,GAAGD,aAAa,CAACY,aAAD,CAA1B;AAEA,SAAO,CACL;AAAEA,IAAAA,aAAa,EAAEX;AAAjB,GADK,EAELA,IAAI,KAAK,MAAT,GACI;AACEY,IAAAA,WAAW,EAAE;AADf,GADJ,GAII;AACEA,IAAAA,WAAW,EAAEjB,cAAc,CAAC,CAAD;AAD7B,GANC,EASL;AACA;AACA,GAAC,MAAD,EAAS,SAAT,EAAoBkB,QAApB,CAA6Bb,IAA7B,8BAEYF,QAFZ;AAGQgB,IAAAA,YAAY,EAAE;AAHtB,WAISpB,aAAa,CAACqB,MAJvB,IAIgC;AACtBD,IAAAA,YAAY,EAAEnB,cAAc,CAAC,CAAD;AADN,GAJhC,6CAWYG,QAXZ,IAWyB;AACjBgB,IAAAA,YAAY,EAAEnB,cAAc,CAAC,CAAD;AADX,GAXzB,QAXK,CAAP;AA2BD,CAzCiB,CAApB;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;AACA,IAAMqB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,SAAI,oBAAC,WAAD,EAAiBA,KAAjB,CAAJ;AAAA,CAAjC;;AAEAD,mBAAmB,CAACE,YAApB,GAAmC;AACjCP,EAAAA,aAAa,EAAEQ;AADkB,CAAnC;AAWAhB,WAAW,CAACe,YAAZ,GAA2BF,mBAAmB,CAACE,YAA/C;AACAf,WAAW,CAACiB,SAAZ,GAAwBJ,mBAAmB,CAACI,SAA5C,C,CAEA;;AACA,SAASJ,mBAAT,G,CACA;;AACA,eAAeb,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { MEDIA_QUERIES, SPACING_POINTS } from '@govuk-react/constants';\nimport { spacing, typography } from '@govuk-react/lib';\nimport ListItem from '@govuk-react/list-item';\n\nfunction translateType(type) {\n  return { bullet: 'disc', number: 'decimal' }[type] || type;\n}\n\nconst OrderedList = styled('ol')(\n  typography.font({ size: 19 }),\n  typography.textColour,\n  {\n    marginTop: 0,\n\n    '& &': {\n      marginTop: SPACING_POINTS[2],\n    },\n  },\n  spacing.withWhiteSpace({ margin: { size: 4, direction: 'bottom' } }),\n  ({ listStyleType }) => {\n    const type = translateType(listStyleType);\n\n    return [\n      { listStyleType: type },\n      type === 'none'\n        ? {\n            paddingLeft: 0,\n          }\n        : {\n            paddingLeft: SPACING_POINTS[4],\n          },\n      // TODO consider whether these spacing adjusts should be for all non-`none` styles\n      // NB the inclusion of these ensures that withWhiteSpace's mb prop doesn't work on ListItem\n      ['disc', 'decimal'].includes(type)\n        ? {\n            [`> ${ListItem}`]: {\n              marginBottom: 0,\n              [MEDIA_QUERIES.TABLET]: {\n                marginBottom: SPACING_POINTS[1],\n              },\n            },\n          }\n        : {\n            // Style when not disc/decimal\n            [`> ${ListItem}`]: {\n              marginBottom: SPACING_POINTS[1],\n            },\n          },\n    ];\n  }\n);\n\n/**\n *\n * ### Usage\n *\n * Simple\n * ```jsx\n * import OrderedList from '@govuk-react/ordered-list';\n * import ListItem from '@govuk-react/list-item';\n *\n * <OrderedList>\n *   <ListItem>Lorem ipsum dolor sit.</ListItem>\n *   <ListItem>Consectetur adipiscing elit.</ListItem>\n *   <ListItem>Curabitur et libero nec.</ListItem>\n * </OrderedList>\n * ```\n *\n * with Roman\n * ```jsx\n * import OrderedList from '@govuk-react/ordered-list';\n * import ListItem from '@govuk-react/list-item';\n *\n * <OrderedList listStyleType=\"lower-roman\">\n *   <ListItem>Lorem ipsum dolor sit.</ListItem>\n *   <ListItem>Consectetur adipiscing elit.</ListItem>\n *   <ListItem>Curabitur et libero nec.</ListItem>\n * </OrderedList>\n * ```\n *\n * ### References\n * - https://design-system.service.gov.uk/styles/typography/#lists\n * - https://github.com/alphagov/govuk-frontend/blob/master/src/core/_lists.scss\n *\n * ### TODO\n * - Consider using the context API https://github.com/reactjs/rfcs/blob/master/text/0002-new-version-of-context.md\n */\n// Create a component wrapper for react-docgen only\nconst DocumentedComponent = props => <OrderedList {...props} />;\n\nDocumentedComponent.defaultProps = {\n  listStyleType: undefined,\n};\n\nDocumentedComponent.propTypes = {\n  /** One or more ListItem components */\n  children: PropTypes.node.isRequired,\n  /** CSS value for `list-style-type`, or `bullet` or `number` to match govuk-frontend */\n  listStyleType: PropTypes.string,\n};\n\nOrderedList.defaultProps = DocumentedComponent.defaultProps;\nOrderedList.propTypes = DocumentedComponent.propTypes;\n\n// Named export so react-docgen will generate docs\nexport { DocumentedComponent };\n// Export un-wrapped styled component\nexport default OrderedList;\n"],"file":"index.js"}