function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { shape, spacing, typography } from '@govuk-react/lib';
import { stripUnit } from 'polished';
import { BLACK, FOCUS_COLOUR, LINK_COLOUR, LINK_HOVER_COLOUR, BORDER_COLOUR } from 'govuk-colours';
import { BORDER_WIDTH, FOCUS_WIDTH, SPACING_POINTS } from '@govuk-react/constants';
var CUSTOM_FOCUS_WIDTH = stripUnit(FOCUS_WIDTH) + 1 + "px";
var StyledDetails = styled('details')(typography.font({
  size: 19
}), typography.textColour, spacing.withWhiteSpace({
  marginBottom: 6
}), {
  display: 'block'
});
var StyledSummary = styled('summary')({
  display: 'inline-block',
  position: 'relative',
  marginBottom: SPACING_POINTS[1],
  paddingLeft: stripUnit(SPACING_POINTS[4]) + stripUnit(BORDER_WIDTH),
  color: LINK_COLOUR,
  cursor: 'pointer',
  ':hover': {
    color: LINK_HOVER_COLOUR
  },
  ':focus': {
    outline: CUSTOM_FOCUS_WIDTH + " solid " + FOCUS_COLOUR,
    outlineOffset: -1,
    color: BLACK,
    background: FOCUS_COLOUR
  },
  '::-webkit-details-marker': {
    display: 'none'
  },
  ':before': _objectSpread({
    content: '""',
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    margin: 'auto'
  }, shape.arrow({
    direction: 'right',
    base: 14
  }), {
    '[open] > &': shape.arrow({
      direction: 'down',
      base: 14
    })
  })
});
var SummaryText = styled('span')({
  textDecoration: 'underline'
});
var DetailsText = styled('div')({
  padding: SPACING_POINTS[3],
  paddingLeft: SPACING_POINTS[4],
  borderLeft: BORDER_WIDTH + " solid " + BORDER_COLOUR,
  p: {
    marginTop: 0,
    marginBottom: SPACING_POINTS[4]
  },
  '> :last-child, p:last-child': {
    marginBottom: 0
  }
});
/**
 *
 * ### Usage
 *
 *
 * Simple
 * ```jsx
 * <Details summary="Help with nationality">
 *   I am a paragraph of hidden details, to be revealed when summary is clicked
 * </Details>
 * ```
 *
 * ### References
 * - https://design-system.service.gov.uk/components/details/
 * - https://github.com/alphagov/govuk-frontend/blob/master/src/components/details/_details.scss
 */

var Details = function Details(_ref) {
  var summary = _ref.summary,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["summary", "children"]);

  return React.createElement(StyledDetails, props, React.createElement(StyledSummary, null, React.createElement(SummaryText, null, summary)), React.createElement(DetailsText, null, children));
};

Details.defaultProps = {
  children: undefined,
  open: false
};
export default Details;
//# sourceMappingURL=index.js.map