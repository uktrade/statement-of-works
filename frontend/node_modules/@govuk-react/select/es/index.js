var _styled;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// https://github.com/alphagov/govuk-frontend/tree/master/src/components/select
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { BLACK, ERROR_COLOUR, YELLOW } from 'govuk-colours';
import { MEDIA_QUERIES } from '@govuk-react/constants';
import { typography } from '@govuk-react/lib';
import Label from '@govuk-react/label';
import LabelText from '@govuk-react/label-text';
import ErrorText from '@govuk-react/error-text';
import HintText from '@govuk-react/hint-text';
var StyledSelect = styled('select')(typography.font({
  size: 19
}), (_styled = {
  boxSizing: 'border-box',
  width: '100%',
  height: '33px',
  padding: '5px 4px 4px',
  border: "2px solid " + BLACK
}, _styled[MEDIA_QUERIES.LARGESCREEN] = {
  width: '50%',
  height: '38px'
}, _styled[':focus'] = {
  outline: "3px solid " + YELLOW,
  outlineOffset: 0
}, _styled), function (_ref) {
  var error = _ref.error;
  return {
    border: error ? "4px solid " + ERROR_COLOUR : undefined
  };
});
/**
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 <Select name="group1" label="This is a label">
    <option value="0">GOV.UK elements option 1</option>
    <option value="1">GOV.UK elements option 2</option>
    <option value="2">GOV.UK elements option 3</option>
  </Select>
 * ```
 *
 * Select with hint text
 * ```jsx
 * <Select
 *    name="group1"
 *    label="This is a label"
 *    hint={[
 *      'This is and example of hintText/description of what we need from you.',
 *    ]}
 *  >
 *    <option value="0">GOV.UK elements option 1</option>
 *    <option value="1">GOV.UK elements option 2</option>
 *    <option value="2">GOV.UK elements option 3</option>
 *  </Select>
 * ```
 *
 * Select with hint text & error
 * ```jsx
 * const meta = {
 *   touched: true,
 *   error: 'Example',
 * };
 *
 * <Select
 *    name="group1"
 *    label="This is a label"
 *    hint={[
 *      'This is and example of hintText/description of what we need from you.',
 *    ]}
 *    meta={meta}
 *  >
 *    <option value="0">GOV.UK elements option 1</option>
 *    <option value="1">GOV.UK elements option 2</option>
 *    <option value="2">GOV.UK elements option 3</option>
 *  </Select>
 * ```
 *
 * Standalone input with inline label
 * ```jsx
 * import LabelText from '@govuk-react/label-text';
 * import { SelectInput } '@govuk-react/select';
 *
 * <label>
 *    <LabelText>Sort by:&nbsp;
 *      <SelectInput>
 *        <option value="0">People</option>
 *        <option value="1">Animals</option>
 *        <option value="2">Vegetables</option>
 *      </SelectInput>
 *    </LabelText>
 *  </label>
 * ```
 *
 * ### References:
 * - https://github.com/alphagov/govuk-frontend/tree/master/src/components/select
 *
 */

var Select = function Select(_ref2) {
  var children = _ref2.children,
      hint = _ref2.hint,
      label = _ref2.label,
      meta = _ref2.meta,
      input = _ref2.input,
      props = _objectWithoutPropertiesLoose(_ref2, ["children", "hint", "label", "meta", "input"]);

  return React.createElement(Label, _extends({}, props, {
    error: meta.touched && meta.error
  }), React.createElement(LabelText, null, label), hint && React.createElement(HintText, null, hint), meta.touched && meta.error && React.createElement(ErrorText, null, meta.error), React.createElement(StyledSelect, _extends({
    error: meta.touched && meta.error
  }, input), children));
};

Select.defaultProps = {
  hint: undefined,
  errorText: undefined,
  input: {},
  meta: {}
};
export default Select;
export { StyledSelect as SelectInput };
//# sourceMappingURL=index.js.map