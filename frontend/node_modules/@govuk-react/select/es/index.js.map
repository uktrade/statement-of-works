{"version":3,"sources":["../src/index.js"],"names":["React","PropTypes","styled","BLACK","ERROR_COLOUR","YELLOW","MEDIA_QUERIES","typography","Label","LabelText","ErrorText","HintText","StyledSelect","font","size","boxSizing","width","height","padding","border","LARGESCREEN","outline","outlineOffset","error","undefined","Select","children","hint","label","meta","input","props","touched","defaultProps","errorText","SelectInput"],"mappings":";;;;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,MAA9B,QAA4C,eAA5C;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,IAAMC,YAAY,GAAGV,MAAM,CAAC,QAAD,CAAN,CACnBK,UAAU,CAACM,IAAX,CAAgB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAhB,CADmB;AAGjBC,EAAAA,SAAS,EAAE,YAHM;AAIjBC,EAAAA,KAAK,EAAE,MAJU;AAKjBC,EAAAA,MAAM,EAAE,MALS;AAMjBC,EAAAA,OAAO,EAAE,aANQ;AAOjBC,EAAAA,MAAM,iBAAehB;AAPJ,WAQhBG,aAAa,CAACc,WARE,IAQY;AAC3BJ,EAAAA,KAAK,EAAE,KADoB;AAE3BC,EAAAA,MAAM,EAAE;AAFmB,CARZ,UAYjB,QAZiB,IAYP;AACRI,EAAAA,OAAO,iBAAehB,MADd;AAERiB,EAAAA,aAAa,EAAE;AAFP,CAZO,YAiBnB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAgB;AACdJ,IAAAA,MAAM,EAAEI,KAAK,kBAAgBnB,YAAhB,GAAiCoB;AADhC,GAAhB;AAAA,CAjBmB,CAArB;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAGC,QAAH,SAAGA,QAAH;AAAA,MAAaC,IAAb,SAAaA,IAAb;AAAA,MAAmBC,KAAnB,SAAmBA,KAAnB;AAAA,MAA0BC,IAA1B,SAA0BA,IAA1B;AAAA,MAAgCC,KAAhC,SAAgCA,KAAhC;AAAA,MAA0CC,KAA1C;;AAAA,SACb,oBAAC,KAAD,eAAWA,KAAX;AAAkB,IAAA,KAAK,EAAEF,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACN;AAA9C,MACE,oBAAC,SAAD,QAAYK,KAAZ,CADF,EAEGD,IAAI,IAAI,oBAAC,QAAD,QAAWA,IAAX,CAFX,EAGGE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACN,KAArB,IAA8B,oBAAC,SAAD,QAAYM,IAAI,CAACN,KAAjB,CAHjC,EAIE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEM,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACN;AAA1C,KAAqDO,KAArD,GACGJ,QADH,CAJF,CADa;AAAA,CAAf;;AAWAD,MAAM,CAACQ,YAAP,GAAsB;AACpBN,EAAAA,IAAI,EAAEH,SADc;AAEpBU,EAAAA,SAAS,EAAEV,SAFS;AAGpBM,EAAAA,KAAK,EAAE,EAHa;AAIpBD,EAAAA,IAAI,EAAE;AAJc,CAAtB;AAoCA,eAAeJ,MAAf;AACA,SAASb,YAAY,IAAIuB,WAAzB","sourcesContent":["// https://github.com/alphagov/govuk-frontend/tree/master/src/components/select\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { BLACK, ERROR_COLOUR, YELLOW } from 'govuk-colours';\nimport { MEDIA_QUERIES } from '@govuk-react/constants';\nimport { typography } from '@govuk-react/lib';\n\nimport Label from '@govuk-react/label';\nimport LabelText from '@govuk-react/label-text';\nimport ErrorText from '@govuk-react/error-text';\nimport HintText from '@govuk-react/hint-text';\n\nconst StyledSelect = styled('select')(\n  typography.font({ size: 19 }),\n  {\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '33px',\n    padding: '5px 4px 4px',\n    border: `2px solid ${BLACK}`,\n    [MEDIA_QUERIES.LARGESCREEN]: {\n      width: '50%',\n      height: '38px',\n    },\n    ':focus': {\n      outline: `3px solid ${YELLOW}`,\n      outlineOffset: 0,\n    },\n  },\n  ({ error }) => ({\n    border: error ? `4px solid ${ERROR_COLOUR}` : undefined,\n  })\n);\n\n/**\n *\n * ### Usage\n *\n * Simple\n * ```jsx\n <Select name=\"group1\" label=\"This is a label\">\n    <option value=\"0\">GOV.UK elements option 1</option>\n    <option value=\"1\">GOV.UK elements option 2</option>\n    <option value=\"2\">GOV.UK elements option 3</option>\n  </Select>\n * ```\n *\n * Select with hint text\n * ```jsx\n * <Select\n *    name=\"group1\"\n *    label=\"This is a label\"\n *    hint={[\n *      'This is and example of hintText/description of what we need from you.',\n *    ]}\n *  >\n *    <option value=\"0\">GOV.UK elements option 1</option>\n *    <option value=\"1\">GOV.UK elements option 2</option>\n *    <option value=\"2\">GOV.UK elements option 3</option>\n *  </Select>\n * ```\n *\n * Select with hint text & error\n * ```jsx\n * const meta = {\n *   touched: true,\n *   error: 'Example',\n * };\n *\n * <Select\n *    name=\"group1\"\n *    label=\"This is a label\"\n *    hint={[\n *      'This is and example of hintText/description of what we need from you.',\n *    ]}\n *    meta={meta}\n *  >\n *    <option value=\"0\">GOV.UK elements option 1</option>\n *    <option value=\"1\">GOV.UK elements option 2</option>\n *    <option value=\"2\">GOV.UK elements option 3</option>\n *  </Select>\n * ```\n *\n * Standalone input with inline label\n * ```jsx\n * import LabelText from '@govuk-react/label-text';\n * import { SelectInput } '@govuk-react/select';\n *\n * <label>\n *    <LabelText>Sort by:&nbsp;\n *      <SelectInput>\n *        <option value=\"0\">People</option>\n *        <option value=\"1\">Animals</option>\n *        <option value=\"2\">Vegetables</option>\n *      </SelectInput>\n *    </LabelText>\n *  </label>\n * ```\n *\n * ### References:\n * - https://github.com/alphagov/govuk-frontend/tree/master/src/components/select\n *\n */\nconst Select = ({ children, hint, label, meta, input, ...props }) => (\n  <Label {...props} error={meta.touched && meta.error}>\n    <LabelText>{label}</LabelText>\n    {hint && <HintText>{hint}</HintText>}\n    {meta.touched && meta.error && <ErrorText>{meta.error}</ErrorText>}\n    <StyledSelect error={meta.touched && meta.error} {...input}>\n      {children}\n    </StyledSelect>\n  </Label>\n);\n\nSelect.defaultProps = {\n  hint: undefined,\n  errorText: undefined,\n  input: {},\n  meta: {},\n};\n\nSelect.propTypes = {\n  hint: PropTypes.string,\n  input: PropTypes.shape({\n    name: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    value: PropTypes.any,\n  }),\n  meta: PropTypes.shape({\n    active: PropTypes.bool,\n    dirty: PropTypes.bool,\n    dirtySinceLastSubmit: PropTypes.bool,\n    error: PropTypes.any,\n    initial: PropTypes.any,\n    invalid: PropTypes.bool,\n    pristine: PropTypes.bool,\n    submitError: PropTypes.any,\n    submitFailed: PropTypes.bool,\n    submitSucceeded: PropTypes.bool,\n    touched: PropTypes.bool,\n    valid: PropTypes.bool,\n    visited: PropTypes.bool,\n  }),\n  children: PropTypes.node.isRequired,\n  label: PropTypes.string.isRequired,\n  errorText: PropTypes.string,\n};\n\nexport default Select;\nexport { StyledSelect as SelectInput };\n"],"file":"index.js"}