import React from 'react';
import { mount } from 'enzyme';
import Button, { ButtonStart, ButtonStartIcon, ButtonDisabled, ButtonBlue, ButtonWacky } from './fixtures';
describe('button', function () {
  describe('basics', function () {
    it('should render a button', function () {
      var wrapper = mount(React.createElement(Button, null, "Example"));
      expect(wrapper.find('button')).toBeTruthy();
    });
    it('matches snapshot', function () {
      var wrapper = mount(React.createElement(Button, null, "Example"));
      expect(wrapper).toMatchSnapshot();
    });
  });
  describe('disabled', function () {
    it('should render a button with the disabled attribute', function () {
      var wrapper = mount(React.createElement(ButtonDisabled, null));
      expect(wrapper.find('button').prop('disabled')).toBeTruthy();
    });
    it('matches snapshot', function () {
      var wrapper = mount(React.createElement(ButtonDisabled, null));
      expect(wrapper).toMatchSnapshot();
    });
  });
  describe('start button', function () {
    it('should render a button with the isStart prop', function () {
      var wrapper = mount(React.createElement(ButtonStart, null));
      expect(wrapper.find('button').parent().prop('isStart')).toBeTruthy();
    });
    it('matches snapshot', function () {
      var wrapper = mount(React.createElement(ButtonStart, null));
      expect(wrapper).toMatchSnapshot();
    });
  });
  describe('button with icon', function () {
    it('should render an SVG icon within the button', function () {
      var wrapper = mount(React.createElement(ButtonStartIcon, null));
      expect(wrapper.find('SVG')).toHaveLength(1);
    });
    it('matches snapshot', function () {
      var wrapper = mount(React.createElement(ButtonStartIcon, null));
      expect(wrapper).toMatchSnapshot();
    });
  });
  describe('blue button, with automatic colours', function () {
    it('matches snapshot', function () {
      var wrapper = mount(React.createElement(ButtonBlue, null));
      expect(wrapper).toMatchSnapshot();
    });
  });
  describe('custom colours', function () {
    it('matches snapshot', function () {
      var wrapper = mount(React.createElement(ButtonWacky, null));
      expect(wrapper).toMatchSnapshot();
    });
  });
});
//# sourceMappingURL=test.js.map