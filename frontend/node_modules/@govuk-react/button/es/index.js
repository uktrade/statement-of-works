function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import PropTypes from 'prop-types';
import React from 'react';
import { BORDER_WIDTH_FORM_ELEMENT, FOCUSABLE, MEDIA_QUERIES, SPACING_POINTS } from '@govuk-react/constants';
import { spacing, typography } from '@govuk-react/lib';
import { BUTTON_COLOUR, BUTTON_COLOUR_DARKEN_15, WHITE } from 'govuk-colours';
import { darken, stripUnit } from 'polished';
var BUTTON_SHADOW_SIZE = BORDER_WIDTH_FORM_ELEMENT;
var RAW_SPACING_2 = SPACING_POINTS[2];
var RAW_BORDER_WIDTH = stripUnit(BORDER_WIDTH_FORM_ELEMENT);
var RAW_SHADOW = stripUnit(BUTTON_SHADOW_SIZE);
var HALF_SHADOW = RAW_SHADOW / 2;
var BASE_PAD = RAW_SPACING_2 - RAW_BORDER_WIDTH;
var StyledButton = styled('button')(function (_ref) {
  var isStart = _ref.isStart;
  return typography.font({
    size: isStart ? 24 : 19,
    lineHeight: isStart ? '1' : '19px',
    weight: isStart ? 'bold' : undefined
  });
}, FOCUSABLE, function (_ref2) {
  var _svg, _ref3;

  var _ref2$buttonColour = _ref2.buttonColour,
      buttonColour = _ref2$buttonColour === void 0 ? BUTTON_COLOUR : _ref2$buttonColour,
      _ref2$buttonHoverColo = _ref2.buttonHoverColour,
      buttonHoverColour = _ref2$buttonHoverColo === void 0 ? darken(0.05, buttonColour) : _ref2$buttonHoverColo,
      _ref2$buttonShadowCol = _ref2.buttonShadowColour,
      buttonShadowColour = _ref2$buttonShadowCol === void 0 ? buttonColour === BUTTON_COLOUR ? BUTTON_COLOUR_DARKEN_15 : darken(0.15, buttonColour) : _ref2$buttonShadowCol,
      _ref2$buttonTextColou = _ref2.buttonTextColour,
      buttonTextColour = _ref2$buttonTextColou === void 0 ? WHITE : _ref2$buttonTextColou,
      isStart = _ref2.isStart;
  return _ref3 = {
    boxSizing: 'border-box',
    display: 'inline-block',
    position: 'relative',
    width: '100%',
    marginTop: 0,
    padding: isStart // differs from govuk-frontend owing to how icons displayed
    ? BASE_PAD + "px " + SPACING_POINTS[3] + "px" : BASE_PAD - HALF_SHADOW + "px " + SPACING_POINTS[2] + "px",
    border: BORDER_WIDTH_FORM_ELEMENT + " solid transparent",
    borderRadius: 0,
    color: buttonTextColour,
    backgroundColor: buttonColour,
    boxShadow: "0 " + BUTTON_SHADOW_SIZE + " 0 " + buttonShadowColour,
    textAlign: 'center',
    verticalAlign: 'top',
    cursor: 'pointer',
    WebkitAppearance: 'none'
  }, _ref3[MEDIA_QUERIES.TABLET] = {
    width: 'auto'
  }, _ref3['&:link, &:visited, &:active, &:hover'] = {
    color: buttonTextColour,
    textDecoration: 'none'
  }, _ref3['&::-moz-focus-inner'] = {
    padding: 0,
    border: 0
  }, _ref3['&:hover, &:focus'] = {
    backgroundColor: buttonHoverColour
  }, _ref3[':active'] = {
    top: BUTTON_SHADOW_SIZE,
    boxShadow: 'none'
  }, _ref3['::before'] = {
    content: '""',
    display: 'block',
    position: 'absolute',
    top: "-" + BORDER_WIDTH_FORM_ELEMENT,
    right: "-" + BORDER_WIDTH_FORM_ELEMENT,
    bottom: "-" + (RAW_BORDER_WIDTH + RAW_SHADOW) + "px",
    left: "-" + BORDER_WIDTH_FORM_ELEMENT,
    background: 'transparent'
  }, _ref3['&:active::before'] = {
    top: "-" + (RAW_BORDER_WIDTH + RAW_SHADOW) + "px"
  }, _ref3[':disabled'] = {
    opacity: 0.5,
    background: buttonColour,
    ':hover': {
      backgroundColor: buttonColour,
      cursor: 'default'
    },
    ':focus': {
      outline: 'none'
    },
    ':active': {
      top: 0,
      boxShadow: "0 " + BUTTON_SHADOW_SIZE + " 0 " + buttonShadowColour
    }
  }, _ref3[' svg'] = (_svg = {
    maxWidth: '15px'
  }, _svg[MEDIA_QUERIES.TABLET] = {
    marginLeft: SPACING_POINTS[2]
  }, _svg), _ref3;
}, // NB we drift from govuk-frontend here in how we display icons
function (_ref4) {
  var icon = _ref4.icon;

  if (icon) {
    return {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between'
    };
  }

  return undefined;
}, spacing.withWhiteSpace({
  margin: {
    direction: 'bottom',
    size: 6,
    adjustment: RAW_SHADOW
  }
}));
var ButtonContents = styled('span')({
  flexGrow: 1
});
/**
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 * <Button>My button text</Button>
 * ```
 *
 * With Icon
 * ```jsx
 * import { ButtonArrow } from '@govuk-react/icons';
 *
 * <Button icon={<ButtonArrow />}>My button text</Button>
 * ```
 *
 * ### References:
 * - https://design-system.service.gov.uk/components/button/
 * - https://github.com/alphagov/govuk-frontend/blob/master/src/components/button/_button.scss
 *
 * ### TODO:
 * - Remove cascade styling for nested elements, specifically `svg`
 * - Consider ensuring text colour automatically switches between black/white based on WCAG guidance
 *   - see https://www.w3.org/TR/WCAG20-TECHS/G18.html
 *   - can use Polished's `readableColor` call, but translate their black to govuk's black
 */

var Button = React.forwardRef(function (_ref5, ref) {
  var start = _ref5.start,
      children = _ref5.children,
      icon = _ref5.icon,
      props = _objectWithoutPropertiesLoose(_ref5, ["start", "children", "icon"]);

  return React.createElement(StyledButton, _extends({
    ref: ref,
    isStart: start,
    icon: icon
  }, props), icon ? React.createElement(ButtonContents, null, children) : children, icon);
});
Button.propTypes = {
  /**
   * Button text
   */
  children: PropTypes.node.isRequired,

  /**
   * Button icon
   */
  icon: PropTypes.node,

  /**
   * Renders a large button if set to true
   */
  start: PropTypes.bool,

  /**
   * Renders a disabled button and removes pointer events if set to true
   */
  disabled: PropTypes.bool,

  /**
   * Override for default button colour
   */
  buttonColour: PropTypes.string,

  /**
   * Override for default button hover colour,
   * which defaults to `buttonColour` darkened by 5%
   */
  buttonHoverColour: PropTypes.string,

  /**
   * Override for default button shadow colour,
   * which defaults to `buttonColour` darkened by 15%
   */
  buttonShadowColour: PropTypes.string,

  /**
   * Override for default button text colour,
   * which defaults to govuk white
   */
  buttonTextColour: PropTypes.string
};
Button.defaultProps = {
  icon: undefined,
  disabled: false,
  start: false,
  buttonColour: undefined,
  buttonHoverColour: undefined,
  buttonShadowColour: undefined,
  buttonTextColour: undefined
};
export default Button;
//# sourceMappingURL=index.js.map