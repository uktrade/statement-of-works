{"version":3,"sources":["../../../src/atoms/legend/test.js"],"names":["React","mount","Legend","describe","nativeError","console","error","beforeEach","jest","resetModules","afterEach","it","sizes","forEach","size","expect","exists","toBeTruthy","toThrow","wrapper","find","toBe","toMatchSnapshot"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAOC,MAAP,MAAmB,GAAnB;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChC;AACA;AACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,KAA5B;AACAC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,IAAI,CAACC,YAAL,GADe,CAEf;;AACAJ,IAAAA,OAAO,CAACC,KAAR,GAAgB,YAAM,CAAE,CAAxB;AACD,GAJS,CAAV;AAMAI,EAAAA,SAAS,CAAC,YAAM;AACd;AACAL,IAAAA,OAAO,CAACC,KAAR,GAAgBF,WAAhB;AACD,GAHQ,CAAT;AAKAO,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMC,KAAK,GAAG,CAAC,IAAD,EAAO,QAAP,EAAiB,GAAjB,EAAsB,OAAtB,EAA+B,GAA/B,EAAoC,QAApC,EAA8C,GAA9C,EAAmD,OAAnD,CAAd;AACAA,IAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpBC,MAAAA,MAAM,CAACd,KAAK,CAAC,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAEa;AAAd,iBAAD,CAAL,CAA0CE,MAA1C,EAAD,CAAN,CAA2DC,UAA3D;AACD,KAFD;AAGD,GALC,CAAF;AAOAN,EAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/DV,IAAAA,KAAK,CAAC,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAE;AAAd,cAAD,CAAL;AACD,GAFC,CAAF;AAIAU,EAAAA,EAAE,CAAC,gDAAD,EAAmD,YAAM;AACzDI,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE;AAAd,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGAH,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE;AAAd,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGAH,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE;AAAd,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGAH,IAAAA,MAAM,CAAC,YAAM;AACXd,MAAAA,KAAK,CAAC,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC;AAAb,mBAAD,CAAL;AACD,KAFK,CAAN,CAEGiB,OAFH;AAGD,GAbC,CAAF;AAeAP,EAAAA,EAAE,CAAC,uDAAD,EAA0D,YAAM;AAChE,QAAMQ,OAAO,GAAGlB,KAAK,CAAC,oBAAC,MAAD;AAAQ,MAAA,aAAa;AAArB,cAAD,CAArB;AAEAc,IAAAA,MAAM,CAACI,OAAO,CAACC,IAAR,CAAa,IAAb,EAAmBJ,MAAnB,EAAD,CAAN,CAAoCK,IAApC,CAAyC,IAAzC;AACD,GAJC,CAAF;AAMAV,EAAAA,EAAE,CAAC,0BAAD,EAA6B,YAAM;AACnCI,IAAAA,MAAM,CAACd,KAAK,CAAC,oBAAC,MAAD,sBAAD,CAAN,CAAN,CAA4CqB,eAA5C;AACD,GAFC,CAAF;AAGD,CAlDO,CAAR","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\n\nimport Legend from '.';\n\ndescribe('Fieldset.Legend', () => {\n  // Capture errors as we're expecting to throw some\n  // eslint-disable-next-line no-console\n  const nativeError = console.error;\n  beforeEach(() => {\n    jest.resetModules();\n    // eslint-disable-next-line no-console\n    console.error = () => {};\n  });\n\n  afterEach(() => {\n    // eslint-disable-next-line no-console\n    console.error = nativeError;\n  });\n\n  it('allows custom string-based font size without crashing', () => {\n    const sizes = ['XL', 'XLARGE', 'L', 'LARGE', 'M', 'MEDIUM', 'S', 'SMALL'];\n    sizes.forEach(size => {\n      expect(mount(<Legend size={size}>Tests</Legend>).exists()).toBeTruthy();\n    });\n  });\n\n  it('allows custom numeric GDS font size without crashing', () => {\n    mount(<Legend size={16}>Test</Legend>);\n  });\n\n  it('throws an error if an unsupported size is used', () => {\n    expect(() => {\n      mount(<Legend size={0}>example</Legend>);\n    }).toThrow();\n    expect(() => {\n      mount(<Legend size={1}>example</Legend>);\n    }).toThrow();\n    expect(() => {\n      mount(<Legend size={99999}>example</Legend>);\n    }).toThrow();\n    expect(() => {\n      mount(<Legend size=\"test\">example</Legend>);\n    }).toThrow();\n  });\n\n  it('will insert a (styled) h1 tag if isPageHeading is set', () => {\n    const wrapper = mount(<Legend isPageHeading>Test</Legend>);\n\n    expect(wrapper.find('h1').exists()).toBe(true);\n  });\n\n  it('matches wrapper snapshot', () => {\n    expect(mount(<Legend>Legend text</Legend>)).toMatchSnapshot();\n  });\n});\n"],"file":"test.js"}