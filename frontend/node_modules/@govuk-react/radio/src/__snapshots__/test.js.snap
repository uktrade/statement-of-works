// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Radio can render with hint text: hint text 1`] = `
.c4 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  margin-bottom: 15px;
  color: #6f777b;
}

.c0 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
  margin-bottom: 10px;
}

.c1 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  cursor: pointer;
  opacity: 0;
  cursor: pointer;
}

.c1:checked + span::after {
  opacity: 1;
}

.c1:focus + span::before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 4px #ffbf47;
}

.c1 + span {
  opacity: 1;
  pointer-events: auto;
}

.c2 {
  display: inline-block;
  margin-bottom: 0;
  padding: 8px 15px 5px;
  cursor: pointer;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c2:before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  border-radius: 50%;
  background: transparent;
}

.c2:after {
  content: '';
  position: absolute;
  top: 10px;
  left: 10px;
  width: 0;
  height: 0;
  border: 10px solid;
  border-radius: 50%;
  opacity: 0;
}

.c3 {
  display: block;
  padding-left: 15px;
  padding-right: 15px;
}

@media print {
  .c4 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c0 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Radio
  hint="Hint text"
  inline={false}
>
  <styled.label
    inline={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
              "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
              [Function],
              [Function],
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={false}
    >
      <label
        className="c0"
      >
        <styled.input
          type="radio"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; cursor: pointer; opacity: 0; :checked + span::after {
  opacity: 1;
} :focus + span::before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 4px #ffbf47;
}",
                    [Function],
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="radio"
          >
            <input
              className="c1"
              type="radio"
            />
          </StyledComponent>
        </styled.input>
        <styled.span>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "lastClassName": "c2",
                  "rules": Array [
                    "display: inline-block; margin-bottom: 0; padding: 8px 15px 5px; cursor: pointer; -ms-touch-action: manipulation; touch-action: manipulation; :before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; border-radius: 50%; background: transparent;
} :after {
  content: ''; position: absolute; top: 10px; left: 10px; width: 0; height: 0; border: 10px solid; border-radius: 50%; opacity: 0;
}",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c2"
            >
              Example with hint text
            </span>
          </StyledComponent>
        </styled.span>
        <Styled(HintText)>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": true,
                  "lastClassName": "c3",
                  "rules": Array [
                    "display: block; padding-left: 15px; padding-right: 15px;",
                  ],
                },
                "displayName": "Styled(HintText)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <HintText
              className="c3"
            >
              <styled.span
                className="c3"
              >
                <StyledComponent
                  className="c3"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bdVaJa",
                        "isStatic": false,
                        "lastClassName": "c4",
                        "rules": Array [
                          "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                          "display: block; margin-bottom: 15px; color: #6f777b;",
                          [Function],
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bdVaJa",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <span
                    className="c3 c4"
                  >
                    Hint text
                  </span>
                </StyledComponent>
              </styled.span>
            </HintText>
          </StyledComponent>
        </Styled(HintText)>
      </label>
    </StyledComponent>
  </styled.label>
</Radio>
`;

exports[`Radio disabled: disabled 1`] = `
.c0 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
  margin-bottom: 10px;
}

.c1 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  cursor: pointer;
  opacity: 0;
  cursor: auto;
}

.c1:checked + span::after {
  opacity: 1;
}

.c1:focus + span::before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 4px #ffbf47;
}

.c1 + span {
  opacity: .5;
  pointer-events: none;
}

.c2 {
  display: inline-block;
  margin-bottom: 0;
  padding: 8px 15px 5px;
  cursor: pointer;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c2:before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  border-radius: 50%;
  background: transparent;
}

.c2:after {
  content: '';
  position: absolute;
  top: 10px;
  left: 10px;
  width: 0;
  height: 0;
  border: 10px solid;
  border-radius: 50%;
  opacity: 0;
}

@media print {
  .c0 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Radio
  disabled={true}
  inline={false}
>
  <styled.label
    inline={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
              "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
              [Function],
              [Function],
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={false}
    >
      <label
        className="c0"
      >
        <styled.input
          disabled={true}
          type="radio"
        >
          <StyledComponent
            disabled={true}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; cursor: pointer; opacity: 0; :checked + span::after {
  opacity: 1;
} :focus + span::before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 4px #ffbf47;
}",
                    [Function],
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="radio"
          >
            <input
              className="c1"
              disabled={true}
              type="radio"
            />
          </StyledComponent>
        </styled.input>
        <styled.span>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "lastClassName": "c2",
                  "rules": Array [
                    "display: inline-block; margin-bottom: 0; padding: 8px 15px 5px; cursor: pointer; -ms-touch-action: manipulation; touch-action: manipulation; :before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; border-radius: 50%; background: transparent;
} :after {
  content: ''; position: absolute; top: 10px; left: 10px; width: 0; height: 0; border: 10px solid; border-radius: 50%; opacity: 0;
}",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c2"
            >
              Example
            </span>
          </StyledComponent>
        </styled.span>
      </label>
    </StyledComponent>
  </styled.label>
</Radio>
`;

exports[`Radio matches snapshot for inline: inline mount 1`] = `
.c0 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
  margin-bottom: 10px;
}

.c1 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  cursor: pointer;
  opacity: 0;
  cursor: pointer;
}

.c1:checked + span::after {
  opacity: 1;
}

.c1:focus + span::before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 4px #ffbf47;
}

.c1 + span {
  opacity: 1;
  pointer-events: auto;
}

.c2 {
  display: inline-block;
  margin-bottom: 0;
  padding: 8px 15px 5px;
  cursor: pointer;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c2:before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  border-radius: 50%;
  background: transparent;
}

.c2:after {
  content: '';
  position: absolute;
  top: 10px;
  left: 10px;
  width: 0;
  height: 0;
  border: 10px solid;
  border-radius: 50%;
  opacity: 0;
}

@media print {
  .c0 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    float: left;
    clear: none;
    margin-right: 20px;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Radio
  inline={true}
  name="example"
>
  <styled.label
    inline={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
              "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
              [Function],
              [Function],
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
    >
      <label
        className="c0"
      >
        <styled.input
          name="example"
          type="radio"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; cursor: pointer; opacity: 0; :checked + span::after {
  opacity: 1;
} :focus + span::before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 4px #ffbf47;
}",
                    [Function],
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="example"
            type="radio"
          >
            <input
              className="c1"
              name="example"
              type="radio"
            />
          </StyledComponent>
        </styled.input>
        <styled.span>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "lastClassName": "c2",
                  "rules": Array [
                    "display: inline-block; margin-bottom: 0; padding: 8px 15px 5px; cursor: pointer; -ms-touch-action: manipulation; touch-action: manipulation; :before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; border-radius: 50%; background: transparent;
} :after {
  content: ''; position: absolute; top: 10px; left: 10px; width: 0; height: 0; border: 10px solid; border-radius: 50%; opacity: 0;
}",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c2"
            >
              example
            </span>
          </StyledComponent>
        </styled.span>
      </label>
    </StyledComponent>
  </styled.label>
</Radio>
`;

exports[`Radio matches snapshot: standard mount 1`] = `
.c0 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  position: relative;
  min-height: 40px;
  padding: 0 0 0 40px;
  clear: left;
  margin-bottom: 10px;
}

.c1 {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  cursor: pointer;
  opacity: 0;
  cursor: pointer;
}

.c1:checked + span::after {
  opacity: 1;
}

.c1:focus + span::before {
  outline: 3px solid transparent;
  outline-offset: 3px;
  box-shadow: 0 0 0 4px #ffbf47;
}

.c1 + span {
  opacity: 1;
  pointer-events: auto;
}

.c2 {
  display: inline-block;
  margin-bottom: 0;
  padding: 8px 15px 5px;
  cursor: pointer;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.c2:before {
  content: '';
  box-sizing: border-box;
  position: absolute;
  top: 0;
  left: 0;
  width: 40px;
  height: 40px;
  border: 2px solid black;
  border-radius: 50%;
  background: transparent;
}

.c2:after {
  content: '';
  position: absolute;
  top: 10px;
  left: 10px;
  width: 0;
  height: 0;
  border: 10px solid;
  border-radius: 50%;
  opacity: 0;
}

@media print {
  .c0 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 10px;
  }
}

<Radio
  inline={false}
  name="example"
>
  <styled.label
    inline={false}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
              "display: block; position: relative; min-height: 40px; padding: 0 0 0 40px; clear: left;",
              [Function],
              [Function],
            ],
          },
          "displayName": "styled.label",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={false}
    >
      <label
        className="c0"
      >
        <styled.input
          name="example"
          type="radio"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "position: absolute; z-index: 1; top: 0; left: 0; width: 40px; height: 40px; cursor: pointer; opacity: 0; :checked + span::after {
  opacity: 1;
} :focus + span::before {
  outline: 3px solid transparent; outline-offset: 3px; box-shadow: 0 0 0 4px #ffbf47;
}",
                    [Function],
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="example"
            type="radio"
          >
            <input
              className="c1"
              name="example"
              type="radio"
            />
          </StyledComponent>
        </styled.input>
        <styled.span>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "lastClassName": "c2",
                  "rules": Array [
                    "display: inline-block; margin-bottom: 0; padding: 8px 15px 5px; cursor: pointer; -ms-touch-action: manipulation; touch-action: manipulation; :before {
  content: ''; box-sizing: border-box; position: absolute; top: 0; left: 0; width: 40px; height: 40px; border: 2px solid black; border-radius: 50%; background: transparent;
} :after {
  content: ''; position: absolute; top: 10px; left: 10px; width: 0; height: 0; border: 10px solid; border-radius: 50%; opacity: 0;
}",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <span
              className="c2"
            >
              example
            </span>
          </StyledComponent>
        </styled.span>
      </label>
    </StyledComponent>
  </styled.label>
</Radio>
`;
