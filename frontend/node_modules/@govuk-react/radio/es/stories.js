function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Field } from 'react-final-form';
import { storiesOf } from '@storybook/react';
import PropTypes from 'prop-types';
import { withKnobs } from '@storybook/addon-knobs/react';
import { FinalFormWrapper, withDocsCustom } from '@govuk-react/storybook-components';
import MultiChoice from '@govuk-react/multi-choice';
import Radio from '.';
import ReadMe from '../README.md';

var required = function required(value) {
  return value ? undefined : 'Required';
};

var RadioGroup = function RadioGroup(_ref) {
  var label = _ref.label,
      hint = _ref.hint,
      options = _ref.options,
      inline = _ref.inline,
      input = _ref.input,
      meta = _ref.meta;
  return React.createElement("div", null, React.createElement(MultiChoice, {
    label: label,
    hint: hint,
    meta: meta
  }, options.map(function (o) {
    return React.createElement("div", {
      key: o.value
    }, React.createElement(Radio, _extends({}, input, {
      value: o.value,
      inline: inline,
      checked: o.value === input.value
    }), o.title));
  })));
};

RadioGroup.defaultProps = {
  input: {},
  meta: {},
  hint: undefined,
  inline: false,
  options: []
};
var stories = storiesOf('Form/Radio', module);
var examples = storiesOf('Form/Radio/Examples', module);
stories.addDecorator(withKnobs);
stories.addDecorator(withDocsCustom(ReadMe));
stories.add('Component default', function () {
  return React.createElement(Radio, {
    name: "group1"
  }, "Radio button text example");
});
examples.add('Radio stacked', function () {
  return React.createElement("div", null, React.createElement(Radio, {
    name: "group1"
  }, "Waste from animal carcasses"), React.createElement(Radio, {
    name: "group1"
  }, "Waste from mines or quarries"), React.createElement(Radio, {
    name: "group1"
  }, "Farm or agricultural waste"));
});
examples.add('Radio inline', function () {
  return React.createElement("div", null, React.createElement(Radio, {
    name: "group1",
    inline: true
  }, "Yes"), React.createElement(Radio, {
    name: "group1",
    inline: true
  }, "No"));
});
examples.add('Radio disabled', function () {
  return React.createElement("div", null, React.createElement(Radio, {
    name: "group1",
    disabled: "disabled"
  }, "Disabled checkbox option"));
});
examples.add('Radio preselected', function () {
  return React.createElement("div", null, React.createElement(Radio, {
    name: "group1",
    checked: true
  }, "Farm or agricultural waste"));
});
examples.add('Radio preselected & disabled', function () {
  return React.createElement("div", null, React.createElement(Radio, {
    name: "group1",
    disabled: "disabled",
    checked: true
  }, "Farm or agricultural waste"));
});
examples.add('Radio with hint text', function () {
  return React.createElement("div", null, React.createElement(Radio, {
    name: "group1",
    hint: "You'll have a user ID if you've registered for Self Assessment or filed a tax return online before."
  }, "Sign in with Government Gateway"), React.createElement(Radio, {
    name: "group1",
    hint: "You'll have an account if you've already proved your identity with either Barclays, CitizenSafe, Digidentity, Experian, Post Office, Royal Mail or SecureIdentity."
  }, "Sign in with GOV.UK Verify"));
});
examples.add('Usage with Final/Redux Form - multi checkbox validation', function () {
  return React.createElement(FinalFormWrapper, null, React.createElement(Field, {
    name: "likesAnimals",
    label: "Do you like animals?",
    hint: "You must tell us",
    component: RadioGroup,
    options: [{
      title: 'Yep',
      value: 'yes'
    }, {
      title: 'Nope',
      value: 'no'
    }],
    validate: required,
    inline: true
  }));
});
//# sourceMappingURL=stories.js.map