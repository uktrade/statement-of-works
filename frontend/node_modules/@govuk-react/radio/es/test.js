import React from 'react';
import ReactDOM from 'react-dom';
import { mount } from 'enzyme';
import Radio from '.';
describe('Radio', function () {
  var props;
  var example = 'example';
  var wrapper = React.createElement(Radio, {
    name: example
  }, example);
  var wrapperInline = React.createElement(Radio, {
    inline: true,
    name: example
  }, example);
  beforeEach(function () {
    props = {
      name: example,
      children: example
    };
  });
  it('renders without crashing', function () {
    var div = document.createElement('div');
    ReactDOM.render(wrapper, div);
  });
  it('passes `props.children` to the rendered `wrapper` as `children`', function () {
    expect(wrapper.props.name).toBe(props.name);
    expect(wrapper.props.children).toBe(props.children);
  });
  it('matches snapshot', function () {
    expect(mount(wrapper)).toMatchSnapshot('standard mount');
  });
  it('disabled', function () {
    expect(mount(React.createElement(Radio, {
      disabled: true
    }, "Example"))).toMatchSnapshot('disabled');
  });
  it('matches snapshot for inline', function () {
    expect(mount(wrapperInline)).toMatchSnapshot('inline mount');
  });
  it('can render with hint text', function () {
    expect(mount(React.createElement(Radio, {
      hint: "Hint text"
    }, "Example with hint text"))).toMatchSnapshot('hint text');
  });
});
//# sourceMappingURL=test.js.map