import React from 'react';
import ReactDOM from 'react-dom';
import { shallow, mount } from 'enzyme';
import DateField from '.'; // TODO: all snapshot tests in this file should be moved to fixtures and included in stories

describe('DateField', function () {
  var example = 'example';
  var wrapper = React.createElement(DateField, {
    errorText: example
  }, example);
  var props;
  beforeEach(function () {
    props = {
      children: example
    };
  });
  it('renders without crashing', function () {
    var div = document.createElement('div');
    ReactDOM.render(React.createElement(DateField, {
      errorText: example,
      hintText: example
    }, example), div);
  });
  it('should render an input type="text"', function () {
    var output = shallow(wrapper);
    expect(output.find('input[type="text"]')).toBeTruthy();
  });
  it('should render one input with name attributes if only a day input name is passed', function () {
    var output = mount(React.createElement(DateField, {
      inputNames: {
        day: 'dayInputName'
      },
      errorText: example
    }, example));
    expect(output.find('input[name]')).toHaveLength(1);
  });
  it('should render no defaultValue attributes if defaultValues are not passed', function () {
    var output = mount(wrapper);
    expect(output.find('input[defaultValue]')).toHaveLength(0);
  });
  it('should render two defaultValue attributes if two defaultValues are passed', function () {
    var output = mount(React.createElement(DateField, {
      defaultValues: {
        day: '1',
        month: '2'
      },
      errorText: example
    }, example));
    expect(output.find('input[defaultValue]')).toHaveLength(2);
  });
  it('should render a label', function () {
    var output = shallow(wrapper);
    expect(output.find('label')).toBeTruthy();
  });
  it('matches wrappersnapshot', function () {
    expect(mount(wrapper)).toMatchSnapshot('wrapper mount');
  });
  it('should support setting value', function () {
    var output = mount(React.createElement(DateField, {
      input: {
        value: {
          day: '1',
          month: '2',
          year: '3'
        }
      }
    }));
    expect(output).toMatchSnapshot('value 1 2 3');
    expect(output.find('input').first().props().value).toBe('1');
  });
  it('should support null value', function () {
    var output = mount(React.createElement(DateField, {
      input: {
        value: null
      }
    }));
    expect(output).toMatchSnapshot('null value');
  });
  it('passes `props` to the rendered label', function () {
    expect(mount(React.createElement(DateField, {
      errorText: example
    }, example)).find('input')).toHaveLength(3);
    expect(mount(React.createElement(DateField, {
      hintText: example
    }, example)).find('div')).toHaveLength(2);
  });
  it('passes `props.children` to the rendered `wrapper` as `children`', function () {
    expect(wrapper.props.children).toBe(props.children);
  });
  it('calls onBlur', function () {
    var spy = jest.fn();
    mount(React.createElement(DateField, {
      onBlur: spy
    })).find('input').first().simulate('blur');
    expect(spy).toHaveBeenCalledTimes(1);
  });
  it('calls onFocus', function () {
    var spy = jest.fn();
    mount(React.createElement(DateField, {
      onFocus: spy
    })).find('input').first().simulate('focus');
    expect(spy).toHaveBeenCalledTimes(1);
  });
  it('does not call onFocus when moving between fields ', function () {
    var spy = jest.fn();
    var inst = mount(React.createElement(DateField, {
      input: {
        onFocus: function onFocus() {
          spy.apply(void 0, arguments);
        }
      }
    }));
    var input1 = inst.find('input').first();
    var input2 = inst.find('input').at(1); // Focus first input

    input1.simulate('focus', {}); // Then simulate tab to second input, first by blurring first input

    input1.simulate('blur', {
      relatedTarget: input2.instance() // relatedTarget for blur is what will next receive focus

    }); // Then focus the new input

    input2.simulate('focus', {
      relatedTarget: input1.instance() // relatedTarget for focus is what has lost focus

    });
    expect(spy).toHaveBeenCalledTimes(1);
  });
  it('calls onChange', function () {
    var spy = jest.fn();
    mount(React.createElement(DateField, {
      onChange: spy
    })).find('input').first().simulate('change');
    expect(spy).toHaveBeenCalledTimes(1);
  }); // TODO: works controlled and uncontrolled
  // TODO: onBlur, onChange, onFocus work as expected when tabbing between fields,
  //       both controlled and uncontrolled
  // TODO: defaultValues work controlled and uncontrolled
});
//# sourceMappingURL=test.js.map