function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { StyledInput } from '@govuk-react/input';
import LabelText from '@govuk-react/label-text';
import Label from '@govuk-react/label';
import multiInputInput from 'multi-input-input';
var StyledLabel = styled(Label)({
  marginRight: '20px',
  marginBottom: 0
}, function (_ref) {
  var year = _ref.year;
  return {
    width: year ? '70px' : '50px'
  };
});
var StyledList = styled('div')({
  display: 'flex'
});

var Input =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Input, _React$Component);

  function Input() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "inputs", {});

    return _this;
  }

  var _proto = Input.prototype;

  _proto.renderInput = function renderInput(label, name, key, defaultValue, error) {
    var _this2 = this;

    return React.createElement(StyledLabel, {
      year: key === 'year'
    }, React.createElement(LabelText, null, label), React.createElement(StyledInput, {
      name: name,
      error: error,
      type: "number",
      defaultValue: defaultValue,
      value: this.props.value ? this.props.value[key] : undefined,
      onChange: function onChange(e) {
        return _this2.props.onChange(e, key);
      },
      onBlur: function onBlur(e) {
        return _this2.props.onBlur(e, key);
      },
      onFocus: function onFocus(e) {
        return _this2.props.onFocus(e, key);
      },
      ref: function ref(input) {
        _this2.inputs[key] = input;

        _this2.props.refs(_this2.inputs);
      }
    }));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        labels = _this$props.labels,
        names = _this$props.names,
        defaultValues = _this$props.defaultValues,
        error = _this$props.error;
    return React.createElement(StyledList, null, this.renderInput(labels.day, names.day, 'day', defaultValues.day, error), this.renderInput(labels.month, names.month, 'month', defaultValues.month, error), this.renderInput(labels.year, names.year, 'year', defaultValues.year, error));
  };

  return Input;
}(React.Component);

Input.defaultProps = {
  value: undefined,
  names: {
    day: 'DateFieldDay',
    month: 'DateFieldMonth',
    year: 'DateFieldYear'
  },
  defaultValues: {
    day: '',
    month: '',
    year: ''
  },
  labels: {
    day: 'Day',
    month: 'Month',
    year: 'Year'
  },
  error: false
}; // This component is dependent on multiInputInput HOC so we always export with HOC

export default multiInputInput(Input);
//# sourceMappingURL=input.js.map