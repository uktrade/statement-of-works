function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { BLACK, ERROR_COLOUR } from 'govuk-colours';
import { BORDER_WIDTH_FORM_ELEMENT, BORDER_WIDTH_FORM_ELEMENT_ERROR, FOCUSABLE, SPACING_POINTS } from '@govuk-react/constants';
import { spacing, typography } from '@govuk-react/lib';
export var StyledInput = styled('input')(typography.font({
  size: 19
}), FOCUSABLE, {
  boxSizing: 'border-box',
  width: '100%',
  height: '40px',
  marginTop: 0,
  padding: SPACING_POINTS[1],
  // TODO replace BLACK here with INPUT_BORDER_COLOUR when supported in govuk-colours
  border: BORDER_WIDTH_FORM_ELEMENT + " solid " + BLACK,
  borderRadius: 0,
  appearance: 'none',
  '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {
    margin: 0,
    WebkitAppearance: 'none'
  },
  '&[type="number"]': {
    MozAppearance: 'textfield'
  }
}, function (_ref) {
  var error = _ref.error,
      errorColor = _ref.errorColor;
  return {
    border: error ? BORDER_WIDTH_FORM_ELEMENT_ERROR + " solid " + (errorColor || ERROR_COLOUR) : undefined
  };
}, spacing.withWhiteSpace({
  marginBottom: 0
}));
/**
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 * <Input />
 * ```
 *
 * ### References:
 * - https://github.com/alphagov/govuk-frontend/tree/master/src/components/
 *
 * ### TODO:
 * - Remove `errorColor` and provide examples on how to extend the component
 */

var Input = function Input(_ref2) {
  var type = _ref2.type,
      props = _objectWithoutPropertiesLoose(_ref2, ["type"]);

  return React.createElement(StyledInput, _extends({
    type: type
  }, props));
};

Input.defaultProps = {
  type: 'text'
};
export default Input;
//# sourceMappingURL=index.js.map