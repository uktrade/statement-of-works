{"version":3,"sources":["../src/index.js"],"names":["styled","React","createElement","PropTypes","HEADING_SIZES","LEVEL_SIZE","LEVEL_TAG","MEDIA_QUERIES","TYPOGRAPHY_SCALE","spacing","typography","deprecate","StyledHeader","level","children","size","props","textColour","actualSize","Number","isNaN","Error","Object","assign","font","weight","display","marginTop","scaleInfo","marginBottom","mobile","TABLET","tablet","withWhiteSpace","Header","defaultProps","undefined","DocumentedHeader","H1","H2","H3","H4","H5","H6"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,aAA/C,EAA8DC,gBAA9D,QAAsF,wBAAtF;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CAEA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAGZ,MAAM,CAAC;AAAA,MAAGa,KAAH,QAAGA,KAAH;AAAA,MAAUC,QAAV,QAAUA,QAAV;AAAA,MAAoBC,IAApB,QAAoBA,IAApB;AAAA,MAA6BC,KAA7B;;AAAA,SAAyCd,aAAa,CAACI,SAAS,CAACO,KAAD,CAAV,EAAmBG,KAAnB,EAA0BF,QAA1B,CAAtD;AAAA,CAAD,CAAN,CACnBJ,UAAU,CAACO,UADQ,EAEnB,iBAAyC;AAAA,MAAtCJ,KAAsC,SAAtCA,KAAsC;AAAA,yBAA/BE,IAA+B;AAAA,MAA/BA,IAA+B,2BAAxBV,UAAU,CAACQ,KAAD,CAAc;AACvC,MAAMK,UAAU,GAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACJ,IAAD,CAAnB,IAA6BX,aAAa,CAACW,IAAD,CAA1C,GAAmDA,IAAtE;;AAEA,MAAI,CAACG,UAAL,EAAiB;AACf,UAAMG,KAAK,mBAAiBN,IAAjB,uBAAX;AACD;;AAED,SAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,UAAU,CAACc,IAAX,CAAgB;AAAET,IAAAA,IAAI,EAAEG,UAAR;AAAoBO,IAAAA,MAAM,EAAE;AAA5B,GAAhB,CAAlB,CAAP;AACD,CAVkB,EAWnB;AACEC,EAAAA,OAAO,EAAE,OADX;AAEEC,EAAAA,SAAS,EAAE;AAFb,CAXmB,EAenB,iBAAyC;AAAA;;AAAA,MAAtCd,KAAsC,SAAtCA,KAAsC;AAAA,yBAA/BE,IAA+B;AAAA,MAA/BA,IAA+B,2BAAxBV,UAAU,CAACQ,KAAD,CAAc;AACvC,MAAMK,UAAU,GAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACJ,IAAD,CAAnB,IAA6BX,aAAa,CAACW,IAAD,CAA1C,GAAmDA,IAAtE;AACA,MAAMa,SAAS,GAAGpB,gBAAgB,CAACU,UAAD,CAAlC;AAEA,SAAOI,MAAM,CAACC,MAAP,CACL,EADK;AAGHM,IAAAA,YAAY,EAAED,SAAS,CAACE,MAAV,CAAiBrB;AAH5B,oBAIFF,aAAa,CAACwB,MAJZ,IAIqB;AACtBF,IAAAA,YAAY,EAAED,SAAS,CAACI,MAAV,CAAiBvB;AADT,GAJrB,kBAAP;AASD,CA5BkB,EA6BnBA,OAAO,CAACwB,cAAR,EA7BmB,CAArB;AAgCA;;;;;;;;;;AASA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAlB,KAAK;AAAA,SAAI,oBAAC,YAAD,EAAkBA,KAAlB,CAAJ;AAAA,CAApB;;AAEAkB,MAAM,CAACC,YAAP,GAAsB;AACpBtB,EAAAA,KAAK,EAAE,CADa;AAEpBE,EAAAA,IAAI,EAAEqB;AAFc,CAAtB;AAkBA,eAAezB,SAAS,CAACuB,MAAD,EAAS,0CAAT,CAAxB;AAEA,SAASA,MAAM,IAAIG,gBAAnB;AACA,SAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,QAAuC,WAAvC","sourcesContent":["import styled from 'styled-components';\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { HEADING_SIZES, LEVEL_SIZE, LEVEL_TAG, MEDIA_QUERIES, TYPOGRAPHY_SCALE } from '@govuk-react/constants';\nimport { spacing, typography } from '@govuk-react/lib';\nimport { deprecate } from '@govuk-react/hoc';\n\n// use `size` only with string for XLARGE, SMALL etc and number for px size\n// so if `size` is a string, we find a numeric size based off `HEADING_SIZES`\n// but if `size` is a number we just send through that number\n\nconst StyledHeader = styled(({ level, children, size, ...props }) => createElement(LEVEL_TAG[level], props, children))(\n  typography.textColour,\n  ({ level, size = LEVEL_SIZE[level] }) => {\n    const actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;\n\n    if (!actualSize) {\n      throw Error(`Unknown size ${size} used for header.`);\n    }\n\n    return Object.assign({}, typography.font({ size: actualSize, weight: 'bold' }));\n  },\n  {\n    display: 'block',\n    marginTop: 0,\n  },\n  ({ level, size = LEVEL_SIZE[level] }) => {\n    const actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;\n    const scaleInfo = TYPOGRAPHY_SCALE[actualSize];\n\n    return Object.assign(\n      {},\n      {\n        marginBottom: scaleInfo.mobile.spacing,\n        [MEDIA_QUERIES.TABLET]: {\n          marginBottom: scaleInfo.tablet.spacing,\n        },\n      }\n    );\n  },\n  spacing.withWhiteSpace()\n);\n\n/**\n *\n * ### Usage\n *\n * This component is DEPRECATED.\n *\n * Please use the `Heading` component instead.\n *\n */\nconst Header = props => <StyledHeader {...props} />;\n\nHeader.defaultProps = {\n  level: 1,\n  size: undefined,\n};\n\nHeader.propTypes = {\n  /**\n   * Semantic heading level value between 1 and 6\n   */\n  level: PropTypes.number,\n  /**\n   * Visual size level, accepts:\n   *    `XLARGE`, `LARGE`, `MEDIUM`, `SMALL`, `XL`, `L`, `M`, `S`\n   *    or a numeric size that fits in the GDS font scale list\n   */\n  size: PropTypes.oneOf([...Object.keys(HEADING_SIZES), ...Object.keys(TYPOGRAPHY_SCALE)]),\n};\n\nexport default deprecate(Header, 'please use the Heading component instead');\n\nexport { Header as DocumentedHeader };\nexport { H1, H2, H3, H4, H5, H6 } from './presets';\n"],"file":"index.js"}