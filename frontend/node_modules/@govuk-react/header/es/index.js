function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import React, { createElement } from 'react';
import PropTypes from 'prop-types';
import { HEADING_SIZES, LEVEL_SIZE, LEVEL_TAG, MEDIA_QUERIES, TYPOGRAPHY_SCALE } from '@govuk-react/constants';
import { spacing, typography } from '@govuk-react/lib';
import { deprecate } from '@govuk-react/hoc'; // use `size` only with string for XLARGE, SMALL etc and number for px size
// so if `size` is a string, we find a numeric size based off `HEADING_SIZES`
// but if `size` is a number we just send through that number

var StyledHeader = styled(function (_ref) {
  var level = _ref.level,
      children = _ref.children,
      size = _ref.size,
      props = _objectWithoutPropertiesLoose(_ref, ["level", "children", "size"]);

  return createElement(LEVEL_TAG[level], props, children);
})(typography.textColour, function (_ref2) {
  var level = _ref2.level,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? LEVEL_SIZE[level] : _ref2$size;
  var actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;

  if (!actualSize) {
    throw Error("Unknown size " + size + " used for header.");
  }

  return Object.assign({}, typography.font({
    size: actualSize,
    weight: 'bold'
  }));
}, {
  display: 'block',
  marginTop: 0
}, function (_ref3) {
  var _Object$assign;

  var level = _ref3.level,
      _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? LEVEL_SIZE[level] : _ref3$size;
  var actualSize = Number.isNaN(Number(size)) ? HEADING_SIZES[size] : size;
  var scaleInfo = TYPOGRAPHY_SCALE[actualSize];
  return Object.assign({}, (_Object$assign = {
    marginBottom: scaleInfo.mobile.spacing
  }, _Object$assign[MEDIA_QUERIES.TABLET] = {
    marginBottom: scaleInfo.tablet.spacing
  }, _Object$assign));
}, spacing.withWhiteSpace());
/**
 *
 * ### Usage
 *
 * This component is DEPRECATED.
 *
 * Please use the `Heading` component instead.
 *
 */

var Header = function Header(props) {
  return React.createElement(StyledHeader, props);
};

Header.defaultProps = {
  level: 1,
  size: undefined
};
export default deprecate(Header, 'please use the Heading component instead');
export { Header as DocumentedHeader };
export { H1, H2, H3, H4, H5, H6 } from './presets';
//# sourceMappingURL=index.js.map