function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { storiesOf } from '@storybook/react';
import { boolean, withKnobs } from '@storybook/addon-knobs/react';
import { withDocsCustom } from '@govuk-react/storybook-components';
import Paragraph from '@govuk-react/paragraph';
import Button from '@govuk-react/button';
import VisuallyHidden from '.';
import ReadMe from '../README.md';
var stories = storiesOf('Misc/VisuallyHidden', module);
var examples = storiesOf('Misc/VisuallyHidden/Examples', module);
stories.addDecorator(withKnobs);
stories.addDecorator(withDocsCustom(ReadMe));
stories.add('Component default', function () {
  return React.createElement("div", null, React.createElement(Paragraph, null, "Following this paragraph is some hidden content. If `focusable` is enabled then you should be able to tab to it."), React.createElement(VisuallyHidden, {
    focusable: boolean('focusable', true)
  }, "Some hidden content"));
});

var Focusable =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(Focusable, _Component);

  function Focusable(props) {
    var _this;

    _this = _Component.call(this, props) || this; // create a ref to store the focusable DOM element

    _this.focusableRef = React.createRef();
    return _this;
  }

  var _proto = Focusable.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.focusableRef.current.focus();
  };

  _proto.render = function render() {
    return React.createElement(VisuallyHidden, _extends({
      ref: this.focusableRef,
      focusable: true
    }, this.props));
  };

  return Focusable;
}(Component);

examples.add('Focussed focusable', function () {
  return React.createElement(Focusable, null, "Focussed focusable VisuallyHidden element");
}, {
  chromatic: {
    delay: 300
  }
});
examples.add('Focussed focusable as a button', function () {
  return React.createElement(Focusable, {
    as: Button
  }, "VisuallyHidden as Button (focusable)");
}, {
  chromatic: {
    delay: 300
  }
});
//# sourceMappingURL=stories.js.map