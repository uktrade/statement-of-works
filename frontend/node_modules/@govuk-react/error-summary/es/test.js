import React from 'react';
import ReactDOM from 'react-dom';
import { mount } from 'enzyme';
import ErrorSummary from '.';
import ErrorSummaryExample, { heading, description, errors } from './fixtures';
describe('error summary', function () {
  var wrapperErrorSummary = mount(React.createElement(ErrorSummaryExample, null));
  it('renders without crashing', function () {
    var div = document.createElement('div');
    ReactDOM.render(React.createElement(ErrorSummaryExample, null), div);
  }); // TODO These tests are fragile, test implementation details, and each test should render...
  // They should be replaced with a different approach, probably using react-testing-library
  // Some tests have been disabled

  it.skip('should render the ErrorSummary component', function () {
    expect(wrapperErrorSummary.find('Heading').exists()).toBe(true);
    expect(wrapperErrorSummary.find('Paragraph').exists()).toBe(true); // NB This fails with latest UnorderedList, and is testing implement

    expect(wrapperErrorSummary.find('UnorderedList').exists()).toBe(true);
    expect(wrapperErrorSummary.find('UnorderedList').find('ListItem').length).toEqual(errors.length);
  });
  it('should render the heading', function () {
    expect(wrapperErrorSummary.find('Heading').text()).toEqual(heading);
  });
  it('should render the optional description', function () {
    expect(wrapperErrorSummary.find('Paragraph').text()).toEqual(description);
  });
  it.skip('should render the list of errors', function () {
    wrapperErrorSummary.find('UnorderedList').find('ListItem').forEach(function (listItem, index) {
      expect(listItem.text()).toEqual(errors[index].text);
    });
  });
  it.skip('should click on the error', function () {
    var mockOnHandleErrorClickCallback = jest.fn();

    var ErrorSummaryClick = function ErrorSummaryClick() {
      return React.createElement(ErrorSummary, {
        heading: heading,
        description: description,
        onHandleErrorClick: mockOnHandleErrorClickCallback,
        errors: errors
      });
    };

    var wrapperErrorSummaryClickMock = mount(React.createElement(ErrorSummaryClick, null));
    var timesClicked = 0;
    wrapperErrorSummaryClickMock.find('UnorderedList').find('ListItem').forEach(function (listItem) {
      listItem.find('Anchor').simulate('click');
      timesClicked += 1;
      expect(mockOnHandleErrorClickCallback.mock.calls.length).toBe(timesClicked);
    });
  });
  it.skip('renders with defaultProps', function () {
    var wrapper = mount(React.createElement(ErrorSummary, {
      heading: heading,
      errors: errors
    }));
    var anchor = wrapper.find('Anchor').first();
    expect(anchor.props().onClick).toBeInstanceOf(Function);
    anchor.simulate('click');
  });
  it('matches the ErrorSummary snapshot', function () {
    expect(wrapperErrorSummary).toMatchSnapshot('error summary');
  });
  it('defaults the heading to "There is a problem" if not set', function () {
    var wrapper = mount(React.createElement(ErrorSummary, {
      errors: errors
    }));
    expect(wrapper.find('Heading').text()).toEqual('There is a problem');
  });
});
//# sourceMappingURL=test.js.map