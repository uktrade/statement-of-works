var _styled, _styled2;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { TEXT_COLOUR, ERROR_COLOUR, FOCUS_COLOUR } from 'govuk-colours';
import { H2 } from '@govuk-react/heading';
import Paragraph from '@govuk-react/paragraph';
import UnorderedList from '@govuk-react/unordered-list';
import Link from '@govuk-react/link';
import ListItem from '@govuk-react/list-item';
import { NTA_LIGHT, FONT_SIZE, BORDER_WIDTH, BORDER_WIDTH_MOBILE, FOCUS_WIDTH, LINE_HEIGHT, SPACING, MEDIA_QUERIES, RESPONSIVE_4 } from '@govuk-react/constants';
import { spacing } from '@govuk-react/lib';
var StyledErrorText = styled(Link)((_styled = {
  fontFamily: NTA_LIGHT,
  WebkitFontSmoothing: 'antialiased',
  MozOsxFontSmoothing: 'grayscale',
  fontWeight: 700,
  marginBottom: SPACING.SCALE_1,
  textDecoration: 'underline',
  textDecorationSkipInk: 'none',
  textTransform: 'none',
  cursor: 'pointer',
  fontSize: FONT_SIZE.SIZE_16,
  lineHeight: LINE_HEIGHT.SIZE_16,
  ':visited': {
    color: "" + ERROR_COLOUR
  }
}, _styled[MEDIA_QUERIES.LARGESCREEN] = {
  fontSize: FONT_SIZE.SIZE_19,
  lineHeight: LINE_HEIGHT.SIZE_19
}, _styled.color = "" + ERROR_COLOUR, _styled.paddingTop = '4px', _styled.paddingBottom = '2px', _styled));
var StyledErrorSummary = styled('div')((_styled2 = {
  color: TEXT_COLOUR,
  padding: RESPONSIVE_4.mobile,
  border: BORDER_WIDTH_MOBILE + " solid " + ERROR_COLOUR,
  '&:focus': {
    outline: FOCUS_WIDTH + " solid " + FOCUS_COLOUR,
    outlineOffset: '0'
  }
}, _styled2[MEDIA_QUERIES.LARGESCREEN] = {
  padding: RESPONSIVE_4.tablet,
  border: BORDER_WIDTH + " solid " + ERROR_COLOUR
}, _styled2), spacing.withWhiteSpace({
  marginBottom: 6
}));
/**
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 * const heading = 'Message to alert the user to a problem goes here';
 * const description = 'Optional description of the errors and how to correct them';
 * const errors = [
 *   {
 *     targetName: 'national-insurance-number',
 *     text: 'National Insurance number error',
 *   },
 *   {
 *     targetName: 'description',
 *     text: 'Description of what you saw error',
 *   },
 * ];
 *
 * const onHandleErrorClick = (targetName) => {
 *   document.getElementsByName(targetName)[0].scrollIntoView();
 * };
 *
 * <div>
 *   <ErrorSummary
 *     heading={heading}
 *     description={description}
 *     onHandleErrorClick={onHandleErrorClick}
 *     errors={errors}
 *   />
 *   <InputField
 *     name="national-insurance-number"
 *     hint="Itâ€™s on your National Insurance card, benefit letter, payslip or P60."
 *   >
 *     National Insurance number
 *   </InputField>
 *   <br />
 *   <TextArea name="description">Description of what you saw</TextArea>
 * </div>
 * ```
 *
 * ### References:
 * - https://govuk-elements.herokuapp.com/errors/#summarise-errors
 * - https://github.com/alphagov/govuk-frontend/tree/master/src/components/error-summary
 *
 * ### TODO:
 * - Swap out browser dependancy for context API to help with React Native support
 */

var ErrorSummary = function ErrorSummary(_ref) {
  var onHandleErrorClick = _ref.onHandleErrorClick,
      heading = _ref.heading,
      description = _ref.description,
      errors = _ref.errors,
      props = _objectWithoutPropertiesLoose(_ref, ["onHandleErrorClick", "heading", "description", "errors"]);

  return React.createElement(StyledErrorSummary, _extends({
    tabIndex: -1
  }, props), React.createElement(H2, {
    size: "MEDIUM"
  }, heading), description && React.createElement(Paragraph, {
    mb: 3
  }, description), errors.length > 0 && React.createElement(UnorderedList, {
    mb: 0,
    listStyleType: "none"
  }, errors.map(function (error, index) {
    return React.createElement(ListItem, {
      key: error.targetName
    }, React.createElement(StyledErrorText, {
      tabIndex: index + 1,
      onClick: function onClick() {
        return onHandleErrorClick(error.targetName);
      }
    }, error.text));
  })));
};

ErrorSummary.defaultProps = {
  onHandleErrorClick: function onHandleErrorClick() {},
  description: undefined,
  errors: []
};
ErrorSummary.defaultProps = {
  heading: 'There is a problem'
};
export default ErrorSummary;
//# sourceMappingURL=index.js.map