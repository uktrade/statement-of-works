// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`error summary matches the ErrorSummary snapshot: error summary 1`] = `
.c1 {
  color: #0b0c0c;
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  font-size: 18px;
  line-height: 1.1111111111111112;
  display: block;
  margin-top: 0;
  margin-bottom: 15px;
}

.c2 {
  margin: 0;
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  margin-bottom: 15px;
}

.c2 > p {
  margin: 0;
}

.c2 > p > code {
  padding: 0.2em 0.4em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(27,31,35,0.05);
  border-radius: 3px;
}

.c2 > pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f6f8fa;
  border-radius: 3px;
}

.c2 > pre > code {
  display: inline;
  padding: 0;
  margin: 0;
  border: 0;
  overflow: visible;
  line-height: inherit;
  word-wrap: normal;
}

.c6 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  margin-bottom: 5px;
}

.c4 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  margin-top: 0;
  margin-bottom: 15px;
  margin-bottom: 0;
  list-style-type: none;
  padding-left: 0;
}

.c4 .c3 {
  margin-top: 10px;
}

.c4 > .c5 {
  margin-bottom: 5px;
}

.c7 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 700;
  margin-bottom: 5px;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  -webkit-text-decoration-skip-ink: none;
  text-decoration-skip-ink: none;
  text-transform: none;
  cursor: pointer;
  font-size: 16px;
  line-height: 1.25;
  color: #b10e1e;
  padding-top: 4px;
  padding-bottom: 2px;
}

.c7:link {
  color: #005ea5;
}

.c7:visited {
  color: #4c2c92;
}

.c7:hover {
  color: #2b8cc4;
}

.c7:active {
  color: #2b8cc4;
}

.c7:focus {
  color: #0b0c0c;
}

.c7:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
  background-color: #ffbf47;
}

.c7:visited {
  color: #b10e1e;
}

.c0 {
  color: #0b0c0c;
  padding: 15px;
  border: 4px solid #b10e1e;
  margin-bottom: 20px;
}

.c0:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  box-sizing: border-box;
  margin-bottom: 0;
}

.c8:after {
  content: '';
  display: table;
  clear: both;
}

.c9 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  color: #0b0c0c;
  display: block;
  clear: none;
  padding-bottom: 2px;
  margin-bottom: 0;
}

.c10 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  display: block;
  margin-bottom: 15px;
  color: #6f777b;
}

.c11 {
  font-family: "nta",Arial,sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.25;
  box-sizing: border-box;
  width: 100%;
  height: 40px;
  margin-top: 0;
  padding: 5px;
  border: 2px solid #0b0c0c;
  border-radius: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin-bottom: 0;
}

.c11:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

.c11::-webkit-outer-spin-button,
.c11::-webkit-inner-spin-button {
  margin: 0;
  -webkit-appearance: none;
}

.c11[type="number"] {
  -moz-appearance: textfield;
}

.c12 {
  box-sizing: border-box;
  font-family: "nta",Arial,sans-serif;
  font-weight: 400;
  text-transform: none;
  font-size: 16px;
  line-height: 1.25;
  width: 100%;
  padding: 5px 4px 4px;
  border: 2px solid #0b0c0c;
}

.c12:focus {
  outline: 3px solid #ffbf47;
  outline-offset: 0;
}

@media print {
  .c1 {
    color: #000;
  }
}

@media print {
  .c1 {
    font-size: 18px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    font-size: 24px;
    line-height: 1.25;
  }
}

@media only screen and (min-width:641px) {
  .c1 {
    margin-bottom: 20px;
  }
}

@media print {
  .c2 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c2 {
    margin-bottom: 15px;
  }
}

@media print {
  .c6 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c6 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c4 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c4 {
    color: #000;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    margin-bottom: 20px;
  }
}

@media only screen and (min-width:641px) {
  .c4 {
    margin-bottom: 0;
  }
}

@media print {
  .c7 {
    font-family: sans-serif;
  }
}

@media print {
  .c7[href^="/"]::after,
  .c7[href^="http://"]::after,
  .c7[href^="https://"]::after {
    content: " (" attr(href) ")";
    font-size: 90%;
    word-wrap: break-word;
  }
}

@media only screen and (min-width:641px) {
  .c7 {
    font-size: 19px;
    line-height: 1.3;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    padding: 20px;
    border: 5px solid #b10e1e;
  }
}

@media only screen and (min-width:641px) {
  .c0 {
    margin-bottom: 30px;
  }
}

@media only screen and (min-width:641px) {
  .c8 {
    margin-bottom: 0;
  }
}

@media print {
  .c9 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c9 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c9 {
    color: #000;
  }
}

@media only screen and (min-width:641px) {
  .c9 {
    margin-bottom: 0;
  }
}

@media print {
  .c10 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c10 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media print {
  .c11 {
    font-size: 14px;
    line-height: 1.15;
  }
}

@media only screen and (min-width:641px) {
  .c11 {
    font-size: 19px;
    line-height: 1.3157894736842106;
  }
}

@media only screen and (min-width:641px) {
  .c11 {
    margin-bottom: 0;
  }
}

@media only screen and (min-width:641px) {
  .c12 {
    font-size: 19px;
    line-height: 1.3;
    width: 75%;
  }
}

<_default>
  <div>
    <ErrorSummary
      description="Optional description of the errors and how to correct them"
      errors={
        Array [
          Object {
            "targetName": "national-insurance-number",
            "text": "National Insurance number error",
          },
          Object {
            "targetName": "description",
            "text": "Description of what you saw error",
          },
        ]
      }
      heading="Message to alert the user to a problem goes here"
      onHandleErrorClick={[Function]}
    >
      <styled.div
        tabIndex={-1}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "color: #0b0c0c; padding: 15px; border: 4px solid #b10e1e; &:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
} @media only screen and (min-width: 641px) {
  padding: 20px; border: 5px solid #b10e1e;
}",
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          tabIndex={-1}
        >
          <div
            className="c0"
            tabIndex={-1}
          >
            <H2
              size="MEDIUM"
            >
              <Heading
                as="h2"
                size="MEDIUM"
              >
                <styled.h1
                  as="h2"
                  size="MEDIUM"
                >
                  <StyledComponent
                    as="h2"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "c1",
                          "rules": Array [
                            "color: #0b0c0c; @media print {
  color: #000;
}",
                            [Function],
                            "display: block; margin-top: 0;",
                            [Function],
                            [Function],
                          ],
                        },
                        "displayName": "styled.h1",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "h1",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    size="MEDIUM"
                  >
                    <h2
                      className="c1"
                      size="MEDIUM"
                    >
                      Message to alert the user to a problem goes here
                    </h2>
                  </StyledComponent>
                </styled.h1>
              </Heading>
            </H2>
            <Paragraph
              linkRenderer={[Function]}
              mb={3}
              supportingText={false}
            >
              <Styled(ReactMarkdown)
                allowedTypes={
                  Array [
                    "paragraph",
                    "emphasis",
                    "strong",
                    "link",
                    "inlineCode",
                    "code",
                    "text",
                  ]
                }
                escapeHtml={false}
                linkRenderer={[Function]}
                mb={3}
                renderers={
                  Object {
                    "link": [Function],
                  }
                }
                skipHtml={true}
                source="Optional description of the errors and how to correct them"
                supportingText={false}
              >
                <StyledComponent
                  allowedTypes={
                    Array [
                      "paragraph",
                      "emphasis",
                      "strong",
                      "link",
                      "inlineCode",
                      "code",
                      "text",
                    ]
                  }
                  escapeHtml={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htpNat",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "margin: 0; > p {
  margin: 0;
} > p > code {
  padding: 0.2em 0.4em; margin: 0; font-size: 85%; background-color: rgba(27,31,35,0.05); border-radius: 3px;
} > pre {
  padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f6f8fa; border-radius: 3px;
} > pre > code {
  display: inline; padding: 0; margin: 0; border: 0; overflow: visible; line-height: inherit; word-wrap: normal;
}",
                          [Function],
                          [Function],
                        ],
                      },
                      "displayName": "Styled(ReactMarkdown)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "renderers": Object {
                        "blockquote": "blockquote",
                        "break": "br",
                        "code": [Function],
                        "definition": [Function],
                        "delete": "del",
                        "emphasis": "em",
                        "heading": [Function],
                        "html": [Function],
                        "image": "img",
                        "imageReference": "img",
                        "inlineCode": [Function],
                        "link": "a",
                        "linkReference": "a",
                        "list": [Function],
                        "listItem": [Function],
                        "paragraph": "p",
                        "parsedHtml": [Function],
                        "root": [Function],
                        "strong": "strong",
                        "table": [Function],
                        "tableBody": [Function],
                        "tableCell": [Function],
                        "tableHead": [Function],
                        "tableRow": [Function],
                        "text": [Function],
                        "thematicBreak": "hr",
                        "virtualHtml": [Function],
                      },
                      "styledComponentId": "sc-htpNat",
                      "target": [Function],
                      "toString": [Function],
                      "types": Array [
                        "break",
                        "paragraph",
                        "emphasis",
                        "strong",
                        "thematicBreak",
                        "blockquote",
                        "delete",
                        "link",
                        "image",
                        "linkReference",
                        "imageReference",
                        "table",
                        "tableHead",
                        "tableBody",
                        "tableRow",
                        "tableCell",
                        "root",
                        "text",
                        "list",
                        "listItem",
                        "definition",
                        "heading",
                        "inlineCode",
                        "code",
                        "html",
                        "virtualHtml",
                        "parsedHtml",
                      ],
                      "uriTransformer": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  linkRenderer={[Function]}
                  mb={3}
                  renderers={
                    Object {
                      "link": [Function],
                    }
                  }
                  skipHtml={true}
                  source="Optional description of the errors and how to correct them"
                  supportingText={false}
                >
                  <ReactMarkdown
                    allowedTypes={
                      Array [
                        "paragraph",
                        "emphasis",
                        "strong",
                        "link",
                        "inlineCode",
                        "code",
                        "text",
                      ]
                    }
                    astPlugins={Array []}
                    className="c2"
                    escapeHtml={false}
                    linkRenderer={[Function]}
                    mb={3}
                    plugins={Array []}
                    rawSourcePos={false}
                    renderers={
                      Object {
                        "link": [Function],
                      }
                    }
                    skipHtml={true}
                    source="Optional description of the errors and how to correct them"
                    sourcePos={false}
                    supportingText={false}
                    transformLinkUri={[Function]}
                  >
                    <Root
                      className="c2"
                      key="root-1-1"
                    >
                      <div
                        className="c2"
                      >
                        <p
                          key="paragraph-1-1"
                        >
                          <TextRenderer
                            key="text-1-1"
                            nodeKey="text-1-1"
                            value="Optional description of the errors and how to correct them"
                          >
                            Optional description of the errors and how to correct them
                          </TextRenderer>
                        </p>
                      </div>
                    </Root>
                  </ReactMarkdown>
                </StyledComponent>
              </Styled(ReactMarkdown)>
            </Paragraph>
            <UnorderedList
              listStyleType="none"
              mb={0}
            >
              <styled.ol
                as="ul"
                listStyleType="none"
                mb={0}
              >
                <StyledComponent
                  as="ul"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "c3",
                        "isStatic": false,
                        "lastClassName": "c4",
                        "rules": Array [
                          "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                          "color: #0b0c0c; @media print {
  color: #000;
}",
                          "margin-top: 0; & & {
  margin-top: 10px;
}",
                          [Function],
                          [Function],
                        ],
                      },
                      "defaultProps": Object {
                        "listStyleType": undefined,
                      },
                      "displayName": "styled.ol",
                      "foldedComponentIds": Array [],
                      "propTypes": undefined,
                      "render": [Function],
                      "styledComponentId": "c3",
                      "target": "ol",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  listStyleType="none"
                  mb={0}
                >
                  <ul
                    className="c3 c4"
                  >
                    <styled.li
                      key="national-insurance-number"
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c5",
                              "isStatic": false,
                              "lastClassName": "c6",
                              "rules": Array [
                                "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                "margin-bottom: 5px;",
                                [Function],
                              ],
                            },
                            "displayName": "styled.li",
                            "foldedComponentIds": Array [],
                            "propTypes": undefined,
                            "render": [Function],
                            "styledComponentId": "c5",
                            "target": "li",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <li
                          className="c5 c6"
                        >
                          <Styled(styled.a)
                            muted={false}
                            noVisitedState={false}
                            onClick={[Function]}
                            tabIndex={1}
                            textColour={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-EHOje",
                                    "isStatic": false,
                                    "lastClassName": "c7",
                                    "rules": Array [
                                      "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-family: sans-serif;
}",
                                      ":link {
  color: #005ea5;
} :visited {
  color: #4c2c92;
} :hover {
  color: #2b8cc4;
} :active {
  color: #2b8cc4;
} :focus {
  color: #0b0c0c;
}",
                                      "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0; background-color: #ffbf47;
}",
                                      "@media print {
  &[href^=\\"/\\"], &[href^=\\"http://\\"], &[href^=\\"https://\\"] {
  &::after {
  content: \\" (\\" attr(href) \\")\\"; font-size: 90%; word-wrap: break-word;
}
}
}",
                                      [Function],
                                      [Function],
                                      [Function],
                                      "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-weight: 700; margin-bottom: 5px; text-decoration: underline; text-decoration-skip-ink: none; text-transform: none; cursor: pointer; font-size: 16px; line-height: 1.25; :visited {
  color: #b10e1e;
} @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #b10e1e; padding-top: 4px; padding-bottom: 2px;",
                                    ],
                                  },
                                  "defaultProps": Object {
                                    "muted": false,
                                    "noVisitedState": false,
                                    "textColour": false,
                                  },
                                  "displayName": "Styled(styled.a)",
                                  "foldedComponentIds": Array [
                                    "sc-bwzfXH",
                                  ],
                                  "propTypes": undefined,
                                  "render": [Function],
                                  "styledComponentId": "sc-EHOje",
                                  "target": "a",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              muted={false}
                              noVisitedState={false}
                              onClick={[Function]}
                              tabIndex={1}
                              textColour={false}
                            >
                              <a
                                className="c7"
                                muted={false}
                                onClick={[Function]}
                                tabIndex={1}
                              >
                                National Insurance number error
                              </a>
                            </StyledComponent>
                          </Styled(styled.a)>
                        </li>
                      </StyledComponent>
                    </styled.li>
                    <styled.li
                      key="description"
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "c5",
                              "isStatic": false,
                              "lastClassName": "c6",
                              "rules": Array [
                                "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                                "margin-bottom: 5px;",
                                [Function],
                              ],
                            },
                            "displayName": "styled.li",
                            "foldedComponentIds": Array [],
                            "propTypes": undefined,
                            "render": [Function],
                            "styledComponentId": "c5",
                            "target": "li",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <li
                          className="c5 c6"
                        >
                          <Styled(styled.a)
                            muted={false}
                            noVisitedState={false}
                            onClick={[Function]}
                            tabIndex={2}
                            textColour={false}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-EHOje",
                                    "isStatic": false,
                                    "lastClassName": "c7",
                                    "rules": Array [
                                      "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-family: sans-serif;
}",
                                      ":link {
  color: #005ea5;
} :visited {
  color: #4c2c92;
} :hover {
  color: #2b8cc4;
} :active {
  color: #2b8cc4;
} :focus {
  color: #0b0c0c;
}",
                                      "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0; background-color: #ffbf47;
}",
                                      "@media print {
  &[href^=\\"/\\"], &[href^=\\"http://\\"], &[href^=\\"https://\\"] {
  &::after {
  content: \\" (\\" attr(href) \\")\\"; font-size: 90%; word-wrap: break-word;
}
}
}",
                                      [Function],
                                      [Function],
                                      [Function],
                                      "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-weight: 700; margin-bottom: 5px; text-decoration: underline; text-decoration-skip-ink: none; text-transform: none; cursor: pointer; font-size: 16px; line-height: 1.25; :visited {
  color: #b10e1e;
} @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3;
} color: #b10e1e; padding-top: 4px; padding-bottom: 2px;",
                                    ],
                                  },
                                  "defaultProps": Object {
                                    "muted": false,
                                    "noVisitedState": false,
                                    "textColour": false,
                                  },
                                  "displayName": "Styled(styled.a)",
                                  "foldedComponentIds": Array [
                                    "sc-bwzfXH",
                                  ],
                                  "propTypes": undefined,
                                  "render": [Function],
                                  "styledComponentId": "sc-EHOje",
                                  "target": "a",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              muted={false}
                              noVisitedState={false}
                              onClick={[Function]}
                              tabIndex={2}
                              textColour={false}
                            >
                              <a
                                className="c7"
                                muted={false}
                                onClick={[Function]}
                                tabIndex={2}
                              >
                                Description of what you saw error
                              </a>
                            </StyledComponent>
                          </Styled(styled.a)>
                        </li>
                      </StyledComponent>
                    </styled.li>
                  </ul>
                </StyledComponent>
              </styled.ol>
            </UnorderedList>
          </div>
        </StyledComponent>
      </styled.div>
    </ErrorSummary>
    <InputField
      hint="It’s on your National Insurance card, benefit letter, payslip or P60. For example, ‘QQ 12 34 56 C’."
      input={Object {}}
      meta={Object {}}
      name="national-insurance-number"
    >
      <Label
        error={false}
        name="national-insurance-number"
      >
        <styled.label
          error={false}
          name="national-insurance-number"
        >
          <StyledComponent
            error={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c8",
                  "rules": Array [
                    "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.label",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "label",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="national-insurance-number"
          >
            <label
              className="c8"
              name="national-insurance-number"
            >
              <LabelText>
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "c9",
                          "rules": Array [
                            "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                            "color: #0b0c0c; @media print {
  color: #000;
}",
                            "display: block; clear: none; padding-bottom: 2px;",
                            [Function],
                            [Function],
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c9"
                    >
                      National Insurance number
                    </span>
                  </StyledComponent>
                </styled.span>
              </LabelText>
              <HintText>
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "c10",
                          "rules": Array [
                            "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                            "display: block; margin-bottom: 15px; color: #6f777b;",
                            [Function],
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c10"
                    >
                      It’s on your National Insurance card, benefit letter, payslip or P60. For example, ‘QQ 12 34 56 C’.
                    </span>
                  </StyledComponent>
                </styled.span>
              </HintText>
              <Input
                type="text"
              >
                <styled.input
                  type="text"
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "lastClassName": "c11",
                          "rules": Array [
                            "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                            "&:focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                            "box-sizing: border-box; width: 100%; height: 40px; margin-top: 0; padding: 5px; border: 2px solid #0b0c0c; border-radius: 0; appearance: none; &::-webkit-outer-spin-button, &::-webkit-inner-spin-button {
  margin: 0; -webkit-appearance: none;
} &[type=\\"number\\"] {
  -moz-appearance: textfield;
}",
                            [Function],
                            [Function],
                          ],
                        },
                        "displayName": "styled.input",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": "input",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="text"
                  >
                    <input
                      className="c11"
                      type="text"
                    />
                  </StyledComponent>
                </styled.input>
              </Input>
            </label>
          </StyledComponent>
        </styled.label>
      </Label>
    </InputField>
    <br />
    <TextArea
      input={Object {}}
      meta={Object {}}
      name="description"
    >
      <Label
        error={false}
        name="description"
      >
        <styled.label
          error={false}
          name="description"
        >
          <StyledComponent
            error={false}
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "c8",
                  "rules": Array [
                    "display: flex; flex-direction: column; box-sizing: border-box; :after {
  content: ''; display: table; clear: both;
}",
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.label",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "label",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            name="description"
          >
            <label
              className="c8"
              name="description"
            >
              <LabelText>
                <styled.span>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "c9",
                          "rules": Array [
                            "font-family: \\"nta\\", Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; @media print {
  font-size: 14px; line-height: 1.15;
} font-weight: 400; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3157894736842106;
}",
                            "color: #0b0c0c; @media print {
  color: #000;
}",
                            "display: block; clear: none; padding-bottom: 2px;",
                            [Function],
                            [Function],
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <span
                      className="c9"
                    >
                      Description of what you saw
                    </span>
                  </StyledComponent>
                </styled.span>
              </LabelText>
              <styled.textarea
                rows="5"
                type="text"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gqjmRU",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "box-sizing: border-box; font-family: \\"nta\\", Arial, sans-serif; font-weight: 400; text-transform: none; font-size: 16px; line-height: 1.25; @media only screen and (min-width: 641px) {
  font-size: 19px; line-height: 1.3; width: 75%;
} width: 100%; padding: 5px 4px 4px; border: 2px solid #0b0c0c; :focus {
  outline: 3px solid #ffbf47; outline-offset: 0;
}",
                          [Function],
                        ],
                      },
                      "displayName": "styled.textarea",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gqjmRU",
                      "target": "textarea",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  rows="5"
                  type="text"
                >
                  <textarea
                    className="c12"
                    rows="5"
                    type="text"
                  />
                </StyledComponent>
              </styled.textarea>
            </label>
          </StyledComponent>
        </styled.label>
      </Label>
    </TextArea>
  </div>
</_default>
`;
