import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import { GUTTER_HALF, MEDIA_QUERIES, WIDTHS } from '@govuk-react/constants';
import { spacing } from '@govuk-react/lib';
var colValues = {
  columnOneQuarter: '25%',
  columnOneThird: '33.3333%',
  columnOneHalf: '50%',
  columnTwoThirds: '66.6667%',
  columnThreeQuarters: '75%',
  columnFull: '100%'
};
var widthFromProps = spacing.withWidth({
  noDefault: true
});
var desktopWidthFromProps = spacing.withWidth({
  mediaQuery: MEDIA_QUERIES.DESKTOP,
  noDefault: true
});

function setGrowShrink(style) {
  var hasAutoWidth = [undefined, 'auto'].includes(style.width); // No explicit width means auto, so grow/shrink should be set

  return Object.assign({}, style, {
    flexGrow: hasAutoWidth ? 1 : 0,
    flexShrink: hasAutoWidth ? 1 : 0
  });
}

var StyledColumn = styled('div')({
  boxSizing: 'border-box',
  paddingRight: GUTTER_HALF,
  paddingLeft: GUTTER_HALF
}, function (props) {
  // if setWidth is set, then columnOneQuarter etc props will be ignored
  var widthStyle = widthFromProps(props);

  if (!widthStyle) {
    var _widthStyle;

    var widthValue;
    Object.entries(props).forEach(function (_ref) {
      var key = _ref[0],
          value = _ref[1];

      if (colValues[key] && value === true) {
        if (process.env.NODE_ENV !== 'production') {
          var newKey = key.replace('column', '').replace(/^([A-Z][a-z]+)([A-Z])/, '$1-$2').toLocaleLowerCase(); // eslint-disable-next-line no-console

          console.warn("deprecated prop " + key + " used in GridCol, please replace with setWidth=\"" + newKey + "\"");
        }

        widthValue = colValues[key];
      }
    });
    widthStyle = (_widthStyle = {}, _widthStyle[MEDIA_QUERIES.TABLET] = {
      width: widthValue
    }, _widthStyle);
  }

  widthStyle[MEDIA_QUERIES.TABLET] = setGrowShrink(widthStyle[MEDIA_QUERIES.TABLET]);
  var desktopWidthStyle = desktopWidthFromProps({
    setWidth: props.setDesktopWidth
  });

  if (desktopWidthStyle) {
    desktopWidthStyle[MEDIA_QUERIES.DESKTOP] = setGrowShrink(desktopWidthStyle[MEDIA_QUERIES.DESKTOP]);
  }

  return Object.assign({}, widthStyle, desktopWidthStyle);
});
/**
 *
 * Should always be wrapped by `GridRow`. Will always render a column at full width if
 * the browser width is below the `TABLET` breakpoint.
 *
 * NB our grid is based on flex-box, which differs from govuk-frontend, which instead uses
 * floats, however it is otherwise similar to use.
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 * import GridRow from '@govuk-react/grid-row';
 * import GridCol from '@govuk-react/grid-col';
 *
 * <Fragment>
 *   <GridRow>
 *     <GridCol>
 *       ...
 *     </GridCol>
 *   </GridRow>
 *   <GridRow>
 *     <GridCol setWidth="one-half">
 *       ...
 *     </GridCol>
 *     <GridCol setWidth="one-quarter">
 *       ...
 *     </GridCol>
 *     <GridCol setWidth="one-quarter">
 *       ...
 *     </GridCol>
 *   <GridRow>
 *     <GridCol setWidth="one-third">
 *       ...
 *     </GridCol>
 *     <GridCol setWidth="two-thirds">
 *       ...
 *     </GridCol>
 *   </GridRow>
 *   <GridRow>
 *     <GridCol setWidth="one-third" setDesktopWidth="one-quarter">
 *       ...
 *     </GridCol>
 *     <GridCol setWidth="two-thirds" setDesktopWidth="auto">
 *       ...
 *     </GridCol>
 *   </GridRow>
 * </Fragment>
 * ```
 *
 * ### References:
 * - https://github.com/alphagov/govuk_frontend_toolkit/blob/master/stylesheets/_grid_layout.scss
 * - https://github.com/alphagov/govuk_elements/blob/master/assets/sass/elements/_layout.scss
 *
 */

var GridCol = function GridCol(props) {
  return React.createElement(StyledColumn, props);
};

GridCol.defaultProps = {
  children: undefined,
  columnOneQuarter: false,
  columnOneThird: false,
  columnOneHalf: false,
  columnTwoThirds: false,
  columnThreeQuarters: false,
  columnFull: false,
  setWidth: undefined,
  setDesktopWidth: undefined
};
export default GridCol;
//# sourceMappingURL=index.js.map