function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Fragment } from 'react';
import { mount } from 'enzyme';
import GridCol from '.';
describe('GridCol', function () {
  var OLD_ENV = process.env; // eslint-disable-next-line no-console

  var nativeWarn = console.warn;
  var warnCallCount;
  /**
   * Make sure the setup is the same for every test
   */

  beforeEach(function () {
    jest.resetModules();
    process.env = _objectSpread({}, OLD_ENV); // eslint-disable-next-line no-console

    console.warn = function () {
      warnCallCount += 1;
    };

    warnCallCount = 0;
  });
  afterEach(function () {
    // eslint-disable-next-line no-console
    console.warn = nativeWarn;
    process.env = OLD_ENV;
  });
  it('renders without crashing', function () {
    mount(React.createElement(GridCol, null, "example"));
  });
  it('produces deprecation warnings for old-style props when not in production', function () {
    process.env.NODE_ENV = 'development';
    mount(React.createElement(GridCol, {
      columnOneThird: true
    }, "example"));
    mount(React.createElement(GridCol, {
      columnTwoThirds: true
    }, "example"));
    mount(React.createElement(GridCol, {
      columnOneQuarter: true
    }, "example")); // For reasons unknown, styled-components is (currently) calling styling functions twice
    // so rather than checking for 3 warnings here we're just checking it's not zero

    expect(warnCallCount).not.toEqual(0);
  });
  it('does not produces deprecation warnings for old-style props when in production', function () {
    process.env.NODE_ENV = 'production';
    mount(React.createElement(GridCol, {
      columnOneThird: true
    }, "example"));
    mount(React.createElement(GridCol, {
      columnTwoThirds: true
    }, "example"));
    mount(React.createElement(GridCol, {
      columnOneQuarter: true
    }, "example"));
    expect(warnCallCount).toEqual(0);
  });
  it('simple render matches snapshot', function () {
    var wrapper = mount(React.createElement(GridCol, null, "example"));
    expect(wrapper).toMatchSnapshot('GridCol simple example');
  });
  it('renders custom widths matching snapshot', function () {
    var example = React.createElement(Fragment, null, React.createElement(GridCol, {
      setWidth: "one-quarter"
    }, "example"), React.createElement(GridCol, {
      setWidth: "three-quarters"
    }, "example"), React.createElement(GridCol, {
      setWidth: "90%"
    }, "example"), React.createElement(GridCol, {
      setWidth: "one-third",
      setDesktopWidth: "one-quarter"
    }, "example"), React.createElement(GridCol, {
      setDesktopWidth: "one-third"
    }, "example"));
    var wrapper = mount(example);
    expect(wrapper).toMatchSnapshot('GridCol custom widths example');
  });
});
//# sourceMappingURL=test.js.map