{"version":3,"sources":["../src/test.js"],"names":["React","Fragment","mount","GridCol","describe","OLD_ENV","process","env","nativeWarn","console","warn","warnCallCount","beforeEach","jest","resetModules","afterEach","it","NODE_ENV","expect","not","toEqual","wrapper","toMatchSnapshot","example"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { mount } from 'enzyme';\n\nimport GridCol from '.';\n\ndescribe('GridCol', () => {\n  const OLD_ENV = process.env;\n  // eslint-disable-next-line no-console\n  const nativeWarn = console.warn;\n  let warnCallCount;\n  /**\n   * Make sure the setup is the same for every test\n   */\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...OLD_ENV };\n    // eslint-disable-next-line no-console\n    console.warn = () => {\n      warnCallCount += 1;\n    };\n    warnCallCount = 0;\n  });\n\n  afterEach(() => {\n    // eslint-disable-next-line no-console\n    console.warn = nativeWarn;\n    process.env = OLD_ENV;\n  });\n\n  it('renders without crashing', () => {\n    mount(<GridCol>example</GridCol>);\n  });\n\n  it('produces deprecation warnings for old-style props when not in production', () => {\n    process.env.NODE_ENV = 'development';\n\n    mount(<GridCol columnOneThird>example</GridCol>);\n    mount(<GridCol columnTwoThirds>example</GridCol>);\n    mount(<GridCol columnOneQuarter>example</GridCol>);\n\n    // For reasons unknown, styled-components is (currently) calling styling functions twice\n    // so rather than checking for 3 warnings here we're just checking it's not zero\n    expect(warnCallCount).not.toEqual(0);\n  });\n\n  it('does not produces deprecation warnings for old-style props when in production', () => {\n    process.env.NODE_ENV = 'production';\n\n    mount(<GridCol columnOneThird>example</GridCol>);\n    mount(<GridCol columnTwoThirds>example</GridCol>);\n    mount(<GridCol columnOneQuarter>example</GridCol>);\n\n    expect(warnCallCount).toEqual(0);\n  });\n\n  it('simple render matches snapshot', () => {\n    const wrapper = mount(<GridCol>example</GridCol>);\n\n    expect(wrapper).toMatchSnapshot('GridCol simple example');\n  });\n\n  it('renders custom widths matching snapshot', () => {\n    const example = (\n      <Fragment>\n        <GridCol setWidth=\"one-quarter\">example</GridCol>\n        <GridCol setWidth=\"three-quarters\">example</GridCol>\n        <GridCol setWidth=\"90%\">example</GridCol>\n        <GridCol setWidth=\"one-third\" setDesktopWidth=\"one-quarter\">\n          example\n        </GridCol>\n        <GridCol setDesktopWidth=\"one-third\">example</GridCol>\n      </Fragment>\n    );\n    const wrapper = mount(example);\n\n    expect(wrapper).toMatchSnapshot('GridCol custom widths example');\n  });\n});\n"],"file":"test.js"}