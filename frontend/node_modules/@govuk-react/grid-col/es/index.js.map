{"version":3,"sources":["../src/index.js"],"names":["React","styled","PropTypes","GUTTER_HALF","MEDIA_QUERIES","WIDTHS","spacing","colValues","columnOneQuarter","columnOneThird","columnOneHalf","columnTwoThirds","columnThreeQuarters","columnFull","widthFromProps","withWidth","noDefault","desktopWidthFromProps","mediaQuery","DESKTOP","setGrowShrink","style","hasAutoWidth","undefined","includes","width","Object","assign","flexGrow","flexShrink","StyledColumn","boxSizing","paddingRight","paddingLeft","props","widthStyle","widthValue","entries","forEach","key","value","process","env","NODE_ENV","newKey","replace","toLocaleLowerCase","console","warn","TABLET","desktopWidthStyle","setWidth","setDesktopWidth","GridCol","defaultProps","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { GUTTER_HALF, MEDIA_QUERIES, WIDTHS } from '@govuk-react/constants';\nimport { spacing } from '@govuk-react/lib';\n\nconst colValues = {\n  columnOneQuarter: '25%',\n  columnOneThird: '33.3333%',\n  columnOneHalf: '50%',\n  columnTwoThirds: '66.6667%',\n  columnThreeQuarters: '75%',\n  columnFull: '100%',\n};\n\nconst widthFromProps = spacing.withWidth({ noDefault: true });\nconst desktopWidthFromProps = spacing.withWidth({\n  mediaQuery: MEDIA_QUERIES.DESKTOP,\n  noDefault: true,\n});\n\nfunction setGrowShrink(style) {\n  const hasAutoWidth = [undefined, 'auto'].includes(style.width);\n\n  // No explicit width means auto, so grow/shrink should be set\n  return Object.assign({}, style, {\n    flexGrow: hasAutoWidth ? 1 : 0,\n    flexShrink: hasAutoWidth ? 1 : 0,\n  });\n}\n\nconst StyledColumn = styled('div')(\n  {\n    boxSizing: 'border-box',\n    paddingRight: GUTTER_HALF,\n    paddingLeft: GUTTER_HALF,\n  },\n  props => {\n    // if setWidth is set, then columnOneQuarter etc props will be ignored\n    let widthStyle = widthFromProps(props);\n\n    if (!widthStyle) {\n      let widthValue;\n\n      Object.entries(props).forEach(([key, value]) => {\n        if (colValues[key] && value === true) {\n          if (process.env.NODE_ENV !== 'production') {\n            const newKey = key\n              .replace('column', '')\n              .replace(/^([A-Z][a-z]+)([A-Z])/, '$1-$2')\n              .toLocaleLowerCase();\n            // eslint-disable-next-line no-console\n            console.warn(`deprecated prop ${key} used in GridCol, please replace with setWidth=\"${newKey}\"`);\n          }\n          widthValue = colValues[key];\n        }\n      });\n      widthStyle = {\n        [MEDIA_QUERIES.TABLET]: {\n          width: widthValue,\n        },\n      };\n    }\n    widthStyle[MEDIA_QUERIES.TABLET] = setGrowShrink(widthStyle[MEDIA_QUERIES.TABLET]);\n\n    const desktopWidthStyle = desktopWidthFromProps({\n      setWidth: props.setDesktopWidth,\n    });\n\n    if (desktopWidthStyle) {\n      desktopWidthStyle[MEDIA_QUERIES.DESKTOP] = setGrowShrink(desktopWidthStyle[MEDIA_QUERIES.DESKTOP]);\n    }\n\n    return Object.assign({}, widthStyle, desktopWidthStyle);\n  }\n);\n\n/**\n *\n * Should always be wrapped by `GridRow`. Will always render a column at full width if\n * the browser width is below the `TABLET` breakpoint.\n *\n * NB our grid is based on flex-box, which differs from govuk-frontend, which instead uses\n * floats, however it is otherwise similar to use.\n *\n * ### Usage\n *\n * Simple\n * ```jsx\n * import GridRow from '@govuk-react/grid-row';\n * import GridCol from '@govuk-react/grid-col';\n *\n * <Fragment>\n *   <GridRow>\n *     <GridCol>\n *       ...\n *     </GridCol>\n *   </GridRow>\n *   <GridRow>\n *     <GridCol setWidth=\"one-half\">\n *       ...\n *     </GridCol>\n *     <GridCol setWidth=\"one-quarter\">\n *       ...\n *     </GridCol>\n *     <GridCol setWidth=\"one-quarter\">\n *       ...\n *     </GridCol>\n *   <GridRow>\n *     <GridCol setWidth=\"one-third\">\n *       ...\n *     </GridCol>\n *     <GridCol setWidth=\"two-thirds\">\n *       ...\n *     </GridCol>\n *   </GridRow>\n *   <GridRow>\n *     <GridCol setWidth=\"one-third\" setDesktopWidth=\"one-quarter\">\n *       ...\n *     </GridCol>\n *     <GridCol setWidth=\"two-thirds\" setDesktopWidth=\"auto\">\n *       ...\n *     </GridCol>\n *   </GridRow>\n * </Fragment>\n * ```\n *\n * ### References:\n * - https://github.com/alphagov/govuk_frontend_toolkit/blob/master/stylesheets/_grid_layout.scss\n * - https://github.com/alphagov/govuk_elements/blob/master/assets/sass/elements/_layout.scss\n *\n */\nconst GridCol = props => <StyledColumn {...props} />;\n\nGridCol.propTypes = {\n  /** GridCol content */\n  children: PropTypes.node,\n  /** Dimension setting for the column (deprecated) */\n  columnOneQuarter: PropTypes.bool,\n  /** Dimension setting for the column (deprecated) */\n  columnOneThird: PropTypes.bool,\n  /** Dimension setting for the column (deprecated) */\n  columnOneHalf: PropTypes.bool,\n  /** Dimension setting for the column (deprecated) */\n  columnTwoThirds: PropTypes.bool,\n  /** Dimension setting for the column (deprecated) */\n  columnThreeQuarters: PropTypes.bool,\n  /** Dimension setting for the column (deprecated) */\n  columnFull: PropTypes.bool,\n  /**\n   * Explicitly set column to width using value or descriptive string\n   * (`one-quarter`, `one-third`, `one-half`, `two-thirds`, `three-quarters`, `full`)\n   */\n  setWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.oneOf(Object.keys(WIDTHS))]),\n  /**\n   * Explicitly set desktop column to width using value or descriptive string\n   * (`one-quarter`, `one-third`, `one-half`, `two-thirds`, `three-quarters`, `full`)\n   */\n  setDesktopWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.oneOf([...Object.keys(WIDTHS)])]),\n};\n\nGridCol.defaultProps = {\n  children: undefined,\n  columnOneQuarter: false,\n  columnOneThird: false,\n  columnOneHalf: false,\n  columnTwoThirds: false,\n  columnThreeQuarters: false,\n  columnFull: false,\n  setWidth: undefined,\n  setDesktopWidth: undefined,\n};\n\nexport default GridCol;\n"],"file":"index.js"}