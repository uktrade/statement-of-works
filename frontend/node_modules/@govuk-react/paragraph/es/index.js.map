{"version":3,"sources":["../src/index.js"],"names":["React","PropTypes","styled","ReactMarkdown","spacing","typography","Link","StyledParagraph","margin","padding","fontSize","backgroundColor","borderRadius","overflow","lineHeight","display","border","wordWrap","supportingText","font","size","withWhiteSpace","marginBottom","Paragraph","children","props","link","linkRenderer","defaultProps"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,IAAMC,eAAe,GAAGL,MAAM,CAACC,aAAD,CAAN,CACtB;AACEK,EAAAA,MAAM,EAAE,CADV;AAEE,SAAO;AACLA,IAAAA,MAAM,EAAE;AADH,GAFT;AAKE,gBAAc;AACZC,IAAAA,OAAO,EAAE,aADG;AAEZD,IAAAA,MAAM,EAAE,GAFI;AAGZE,IAAAA,QAAQ,EAAE,KAHE;AAIZC,IAAAA,eAAe,EAAE,qBAJL;AAKZC,IAAAA,YAAY,EAAE;AALF,GALhB;AAYE,WAAS;AACPH,IAAAA,OAAO,EAAE,MADF;AAEPI,IAAAA,QAAQ,EAAE,MAFH;AAGPH,IAAAA,QAAQ,EAAE,KAHH;AAIPI,IAAAA,UAAU,EAAE,MAJL;AAKPH,IAAAA,eAAe,EAAE,SALV;AAMPC,IAAAA,YAAY,EAAE;AANP,GAZX;AAoBE,kBAAgB;AACdG,IAAAA,OAAO,EAAE,QADK;AAEdN,IAAAA,OAAO,EAAE,GAFK;AAGdD,IAAAA,MAAM,EAAE,GAHM;AAIdQ,IAAAA,MAAM,EAAE,GAJM;AAKdH,IAAAA,QAAQ,EAAE,SALI;AAMdC,IAAAA,UAAU,EAAE,SANE;AAOdG,IAAAA,QAAQ,EAAE;AAPI;AApBlB,CADsB,EA+BtB;AAAA,MAAGC,cAAH,QAAGA,cAAH;AAAA,SAAwBb,UAAU,CAACc,IAAX,CAAgB;AAAEC,IAAAA,IAAI,EAAEF,cAAc,GAAG,EAAH,GAAQ;AAA9B,GAAhB,CAAxB;AAAA,CA/BsB,EAgCtBd,OAAO,CAACiB,cAAR,CAAuB;AAAEC,EAAAA,YAAY,EAAE;AAAhB,CAAvB,CAhCsB,CAAxB;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGC,QAAH,SAAGA,QAAH;AAAA,MAAgBC,KAAhB;;AAAA,SAChB,oBAAC,eAAD;AACE,IAAA,MAAM,EAAED,QADV;AAEE,IAAA,UAAU,EAAE,KAFd;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,YAAY,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,QAA1B,EAAoC,MAApC,EAA4C,YAA5C,EAA0D,MAA1D,EAAkE,MAAlE,CAJhB;AAKE,IAAA,SAAS,EAAE;AAAEE,MAAAA,IAAI,EAAED,KAAK,CAACE;AAAd;AALb,KAMMF,KANN,EADgB;AAAA,CAAlB;;AAuBAF,SAAS,CAACK,YAAV,GAAyB;AACvBJ,EAAAA,QAAQ,EAAE,EADa;AAEvBN,EAAAA,cAAc,EAAE,KAFO;AAGvBS,EAAAA,YAAY,EAAE,sBAAAF,KAAK;AAAA,WAAI,oBAAC,IAAD,EAAUA,KAAV,CAAJ;AAAA;AAHI,CAAzB;AAMA,eAAeF,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ReactMarkdown from 'react-markdown';\nimport { spacing, typography } from '@govuk-react/lib';\nimport Link from '@govuk-react/link';\n\nconst StyledParagraph = styled(ReactMarkdown)(\n  {\n    margin: 0,\n    '> p': {\n      margin: 0,\n    },\n    '> p > code': {\n      padding: '0.2em 0.4em',\n      margin: '0',\n      fontSize: '85%',\n      backgroundColor: 'rgba(27,31,35,0.05)',\n      borderRadius: '3px',\n    },\n    '> pre': {\n      padding: '16px',\n      overflow: 'auto',\n      fontSize: '85%',\n      lineHeight: '1.45',\n      backgroundColor: '#f6f8fa',\n      borderRadius: '3px',\n    },\n    '> pre > code': {\n      display: 'inline',\n      padding: '0',\n      margin: '0',\n      border: '0',\n      overflow: 'visible',\n      lineHeight: 'inherit',\n      wordWrap: 'normal',\n    },\n  },\n  ({ supportingText }) => typography.font({ size: supportingText ? 16 : 19 }),\n  spacing.withWhiteSpace({ marginBottom: 4 })\n);\n\n/**\n *\n * Supports bold, italic, links, inline code and block code in Markdown ONLY.\n * This is to ensure we follow GDS as closely as possible.\n * It is worth noting that GDS recommends avoiding bold and italics.\n *\n * Bold should be avoided in general as not only can it dilute the message, it will also\n * cause Screenreaders to increase the volume of any bold text to reflect the increase in\n * font-weight.\n *\n * ### Usage\n *\n * Simple\n * ```jsx\n * <Paragraph>Lorem `ipsum` **dolor** sit *amet* with [some link](https://google.com)</Paragraph>\n * ```\n *\n * As supporting text\n * ```jsx\n * <Paragraph supportingText>Lorem `ipsum` **dolor** sit *amet* with [some link](https://google.com)</Paragraph>\n * ```\n *\n * With a block of code\n * ````jsx\n * <Paragraph>\n *   Some other text...\n *   ```\n *   Some Code Block\n *   ```\n *   Some more text.\n * </Paragraph>\n * ````\n *\n * With React router\n *\n * ```jsx\n * const ReactRouterLinkRenderer = ({ href, children }) => (\n *   href.match(/^\\//)\n *     ? <Link to={href}>{children}</Link>\n *     : <a href={href}>{children}</a>\n * );\n *\n * <Paragraph linkRenderer={ReactRouterLinkRenderer}>\n *   ...\n * </Paragraph>\n * ```\n *\n * ### References\n * - https://govuk-elements.herokuapp.com/typography/#typography-body-copy\n *\n * ### TODO\n * - Add test for supporting text\n * - Review code snippet styling\n * - Remove magic numbers from inline code styling blocks\n */\nconst Paragraph = ({ children, ...props }) => (\n  <StyledParagraph\n    source={children}\n    escapeHtml={false}\n    skipHtml\n    allowedTypes={['paragraph', 'emphasis', 'strong', 'link', 'inlineCode', 'code', 'text']}\n    renderers={{ link: props.linkRenderer }}\n    {...props}\n  />\n);\n\nParagraph.propTypes = {\n  /**\n   * Text content supporting markdown\n   */\n  children: PropTypes.node,\n  /**\n   * Is this paragraph supporting text for another element?\n   */\n  supportingText: PropTypes.bool,\n  linkRenderer: PropTypes.func,\n};\n\nParagraph.defaultProps = {\n  children: '',\n  supportingText: false,\n  linkRenderer: props => <Link {...props} />,\n};\n\nexport default Paragraph;\n"],"file":"index.js"}