function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import ReactMarkdown from 'react-markdown';
import { spacing, typography } from '@govuk-react/lib';
import Link from '@govuk-react/link';
var StyledParagraph = styled(ReactMarkdown)({
  margin: 0,
  '> p': {
    margin: 0
  },
  '> p > code': {
    padding: '0.2em 0.4em',
    margin: '0',
    fontSize: '85%',
    backgroundColor: 'rgba(27,31,35,0.05)',
    borderRadius: '3px'
  },
  '> pre': {
    padding: '16px',
    overflow: 'auto',
    fontSize: '85%',
    lineHeight: '1.45',
    backgroundColor: '#f6f8fa',
    borderRadius: '3px'
  },
  '> pre > code': {
    display: 'inline',
    padding: '0',
    margin: '0',
    border: '0',
    overflow: 'visible',
    lineHeight: 'inherit',
    wordWrap: 'normal'
  }
}, function (_ref) {
  var supportingText = _ref.supportingText;
  return typography.font({
    size: supportingText ? 16 : 19
  });
}, spacing.withWhiteSpace({
  marginBottom: 4
}));
/**
 *
 * Supports bold, italic, links, inline code and block code in Markdown ONLY.
 * This is to ensure we follow GDS as closely as possible.
 * It is worth noting that GDS recommends avoiding bold and italics.
 *
 * Bold should be avoided in general as not only can it dilute the message, it will also
 * cause Screenreaders to increase the volume of any bold text to reflect the increase in
 * font-weight.
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 * <Paragraph>Lorem `ipsum` **dolor** sit *amet* with [some link](https://google.com)</Paragraph>
 * ```
 *
 * As supporting text
 * ```jsx
 * <Paragraph supportingText>Lorem `ipsum` **dolor** sit *amet* with [some link](https://google.com)</Paragraph>
 * ```
 *
 * With a block of code
 * ````jsx
 * <Paragraph>
 *   Some other text...
 *   ```
 *   Some Code Block
 *   ```
 *   Some more text.
 * </Paragraph>
 * ````
 *
 * With React router
 *
 * ```jsx
 * const ReactRouterLinkRenderer = ({ href, children }) => (
 *   href.match(/^\//)
 *     ? <Link to={href}>{children}</Link>
 *     : <a href={href}>{children}</a>
 * );
 *
 * <Paragraph linkRenderer={ReactRouterLinkRenderer}>
 *   ...
 * </Paragraph>
 * ```
 *
 * ### References
 * - https://govuk-elements.herokuapp.com/typography/#typography-body-copy
 *
 * ### TODO
 * - Add test for supporting text
 * - Review code snippet styling
 * - Remove magic numbers from inline code styling blocks
 */

var Paragraph = function Paragraph(_ref2) {
  var children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["children"]);

  return React.createElement(StyledParagraph, _extends({
    source: children,
    escapeHtml: false,
    skipHtml: true,
    allowedTypes: ['paragraph', 'emphasis', 'strong', 'link', 'inlineCode', 'code', 'text'],
    renderers: {
      link: props.linkRenderer
    }
  }, props));
};

Paragraph.defaultProps = {
  children: '',
  supportingText: false,
  linkRenderer: function linkRenderer(props) {
    return React.createElement(Link, props);
  }
};
export default Paragraph;
//# sourceMappingURL=index.js.map