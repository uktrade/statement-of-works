function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import HintText from '@govuk-react/hint-text';
import { FOCUS_COLOUR } from 'govuk-colours';
import { BORDER_WIDTH, BORDER_WIDTH_FORM_ELEMENT, FOCUS_WIDTH, SPACING_POINTS } from '@govuk-react/constants';
import { spacing, typography } from '@govuk-react/lib';
var checkboxSize = SPACING_POINTS[7];
var labelPaddingLeftRight = SPACING_POINTS[3];
var StyledCheckbox = styled('label')(typography.font({
  size: 19
}), {
  display: 'block',
  position: 'relative',
  minHeight: checkboxSize,
  padding: "0 0 0 " + checkboxSize + "px",
  clear: 'left'
}, spacing.withWhiteSpace({
  marginBottom: 2
}));
var StyledInput = styled('input')({
  position: 'absolute',
  zIndex: 1,
  top: 0,
  left: 0,
  width: checkboxSize,
  height: checkboxSize,
  opacity: 0,
  ':checked + span:after': {
    opacity: 1
  },
  ':focus + span:before': {
    outline: FOCUS_WIDTH + " solid transparent",
    outlineOffset: FOCUS_WIDTH,
    boxShadow: "0 0 0 " + FOCUS_WIDTH + " " + FOCUS_COLOUR
  }
}, function (_ref) {
  var disabled = _ref.disabled;
  return {
    cursor: disabled ? 'default' : 'pointer',
    ' + span': {
      opacity: disabled ? '.5' : '1',
      pointerEvents: disabled ? 'none' : 'auto'
    }
  };
});
var StyledLabel = styled('span')({
  display: 'inline-block',
  cursor: 'pointer',
  padding: "8px " + labelPaddingLeftRight + "px " + SPACING_POINTS[1] + "px",
  MsTouchAction: 'manipulation',
  touchAction: 'manipulation',
  '::before': {
    content: "''",
    boxSizing: 'border-box',
    position: 'absolute',
    top: 0,
    left: 0,
    width: checkboxSize,
    height: checkboxSize,
    border: BORDER_WIDTH_FORM_ELEMENT + " solid black",
    background: 'transparent'
  },
  '::after': {
    content: "''",
    position: 'absolute',
    top: '11px',
    left: '9px',
    width: '18px',
    height: '7px',
    transform: 'rotate(-45deg)',
    border: 'solid',
    borderWidth: "0 0 " + BORDER_WIDTH + " " + BORDER_WIDTH,
    borderTopColor: 'transparent',
    background: 'transparent',
    opacity: 0
  }
});
var StyledCheckboxHint = styled(HintText)({
  display: 'block',
  paddingLeft: labelPaddingLeftRight,
  paddingRight: labelPaddingLeftRight
});
/**
 *
 * ### Usage
 *
 * Simple
 * ```jsx
 * <Checkbox>Text displayed next to checkbox</Checkbox>
 * ```
 *
 * With disabled state
 * ```jsx
 * <Checkbox disabled="disabled">Disabled checkbox option</Checkbox>
 * ```
 *
 * Checkbox preselected
 * ```jsx
 * <Checkbox defaultChecked>Farm or agricultural waste</Checkbox>
 * ```
 *
 * Checkbox preselected & disabled
 * ```jsx
 * <Checkbox disabled="disabled" defaultChecked>Farm or agricultural waste</Checkbox>
 * ```
 *
 * Checkbox with hint text
 * ```jsx
 * <Checkbox hint="including English, Scottish, Welsh and Northern Irish">British</Checkbox>
 *```
 * ### References:
 * - https://github.com/alphagov/govuk-frontend/blob/master/src/components/checkboxes/_checkboxes.scss
 *
 */

var Checkbox = function Checkbox(_ref2) {
  var children = _ref2.children,
      className = _ref2.className,
      hint = _ref2.hint,
      props = _objectWithoutPropertiesLoose(_ref2, ["children", "className", "hint"]);

  return React.createElement(StyledCheckbox, {
    className: className
  }, React.createElement(StyledInput, _extends({
    type: "checkbox"
  }, props)), React.createElement(StyledLabel, null, children), hint && React.createElement(StyledCheckboxHint, null, hint));
};

Checkbox.defaultProps = {
  hint: undefined,
  className: undefined
};
export default Checkbox;
//# sourceMappingURL=index.js.map